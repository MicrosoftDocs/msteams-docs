### YamlMime:Tutorial
title: Invoke dialogs from Microsoft Teams
metadata:
  title: Invoke dialogs from Microsoft Teams
  description: With this learning module, learn how to set up Teams dialog by using Adaptive Cards or Bot Framework cards.
  audience: Developer
  level: Beginner
  ms.date: 23/02/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: task-modules-and-cards/task-modules/task-modules-bots.md
  nextTutorialTitle: Read more on dialogs from bots
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    You can invoke dialogs (referred as task modules in TeamsJS v1.x) from Teams bots by using Adaptive Cards or Bot Framework cards.

    **Key features of dialogs:**

    * Enhance user experience by avoiding multiple steps.
    * Help users to keep track of the bot state.
    * Retrieve input from user and display custom web page content.

    This step-by-step guide helps you to create a sample Azure bot to invoke Teams dialog. You'll see the following output:

     :::image type="content" source="./assets/images/Teams-task-module/final-image.png" alt-text="Screenshot shows the final output of the dialog.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment: 
    
     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
     | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
     
     > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
- title: Set up local environment
  durationInMinutes: 1
  content: | 

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Register Microsoft Entra app
  durationInMinutes: 5
  content: |
   The following steps help you to create and register your bot in Azure portal:

   * Create and register your Azure app.
   * Create client secret to enable SSO authentication of the bot.
   * Add Teams channel to deploy the bot.
   * Create a tunnel to your web server's endpoints using dev tunnel (recommended) or ngrok.
   * Add messaging endpoint to the dev tunnel that you created.

   [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

      # [dev tunnel](#tab/dev)

      [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

      # [ngrok](#tab/ngrok)
      
      [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

      ---     

    [!INCLUDE [Azure web authentication](includes/get-started/azure-web-authentication.md)]
    
    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]

    [!INCLUDE [API permission](includes/get-started/azure-api-permissions.md)]

    [!INCLUDE [Application ID URI](includes/get-started/application-id-uri.md)]

    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

- title: Create your bot
  durationInMinutes: 5
  content: |

     [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]

     [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

     [!INCLUDE [Messaging endpoint](includes/get-started/messaging-endpoint.md)]

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Go to the **appsettings.json** file in the cloned repository.

        :::image type="content" source="~/assets/images/Teams-task-module/appsettings-file-location.png" alt-text="App settings location":::

    1. Open the **appsettings.json** and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to **Value** of **Client secret**.
         * Set `"MicrosoftAppTenantId"` to the tenant ID of the tenant where the app is used.
         * Set `"BaseUrl"` to the fully qualified domain name (https to io).

        :::image type="content" source="~/assets/images/Teams-task-module/appsettings_1.png" alt-text="Screenshot shows appsetting.json in visual studio.":::

    1. Go to the **manifest.json** file in the cloned repository.

        :::image type="content" source="~/assets/images/Teams-task-module/manifest-file-location.png" alt-text="Manifest file location":::
    
    1. Open the **manifest.json** file and update the following information: 

         * Replace all occurrences of `<<Domain-Name>>` with your ngrok or dev tunnel domain.
         * Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with your bot's **Microsoft App ID**.

        :::image type="content" source="~/assets/images/Teams-task-module/manifest_1.png" lightbox="~\assets\images\Teams-task-module\manifest_2.png" alt-text="Manifest image2.":::

- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service, use the latest version of Visual Studio or Command line.

    # [Latest version of Visual Studio](#tab/latestversionofvisualstudio)

       1. Open Visual Studio.
       1. Go to **File** > **Open** > **Project/Solution...**.
    
          :::image type="content" source="~/assets/images/Teams-task-module/VSopenfile.png" alt-text="Screenshot shows the open file with folder location.":::

       1. Select **TeamsTaskModule.csproj** file from **samples** > **bot-task-module** > **csharp** folder.

          :::image type="content" source="~/assets/images/Teams-task-module/project-file-location.png" alt-text="CS proj file":::

       1. Under **View**, open **Solution Explorer**.

          :::image type="content" source="~/assets/images/Teams-task-module/solutionexplorer_1.png" alt-text="Screenshot shows the open solution explorer.":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="~/assets/images/Teams-task-module/certificate_1.png" alt-text="Trust Certificate":::

          A webpage opens with a message. **Your bot is ready!**

          :::image type="content" source="~/assets/images/Teams-task-module/appisready.png" alt-text="App ready"::: 

        
    # [Command line](#tab/cli)

    Go to **Microsoft-Teams-Samples** > **samples** > **bot-task-module** > **csharp** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
   
    :::image type="content" source="~/assets/images/Teams-task-module/dotnetrun.png" alt-text="Screenshot shows the command prompt of dotnet run."::: 

- title: Upload Task Module app
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **samples** > **bot-task-module** > **csharp** > **TeamsAppManifest**.

    1. Create a .zip file with the following files that are present in the **TeamsAppManifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       :::image type="content" source="~/assets/images/Teams-task-module/manifest-file-zip.png" alt-text="Zip file"::: 

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, custom app upload is enabled.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-upload.png" alt-text="Screenshot showing the selection of Upload a custom app highlighted in red.":::
       
    1. Select the .zip file you've created in the **TeamsAppManifest** folder and select **Open**.

       :::image type="content" source="~/assets/images/Teams-task-module/upload-manifest-zip.png" alt-text="Select zip file":::

    1. Select **Add**.

       :::image type="content" source="~/assets/images/Teams-task-module/add-app-card.png" alt-text="Add the app":::
   
    1. In the compose message area, type **hi** and bot sends an Adaptive card. 

       :::image type="content" source="~/assets/images/Teams-task-module/chat_ready_1.png" alt-text="Chat":::
    
       The app displays **Task Module Invocation from Hero Card** and **Task Module Invocation from Adaptive Card**.         

- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select **Adaptive Card** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card_1.png" alt-text="Adaptive card":::

    1. Enter **Hello** and select **Submit**.

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card-text.png" alt-text="Screenshot shows Adaptive card message box.":::

       **Adaptive Card** sends an acknowledgment message.
       
       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-card-submit.png" alt-text="Screenshot shows the Adaptive card sends an acknowledgment message.":::

    1. Select **Custom Form** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-form_1.png" alt-text="Custom form":::

    1. Enter the required information:

       * **Name**
       * **Email**
       * **Favorite book**
       * **Password**
       * **Confirm Password**

    1. Select **Sign up**.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-text.png" alt-text="Custom Form text":::

       **Custom Form** sends an acknowledgment message.

       :::image type="content" source="~/assets/images/Teams-task-module/custom-on-sign-up.png" alt-text="Sign up":::

       The following information appears in chat:

       :::image type="content" source="~/assets/images/Teams-task-module/adaptive-custom-chat.png" alt-text="Chat":::

    1. Select **YouTube** from **Task Module Invocation from Hero Card** or **Task Module Invocation from Adaptive Card**.

       :::image type="content" source="~/assets/images/Teams-task-module/youtube_1.png" alt-text="YouTube":::

    1. Select **Play**.

       :::image type="content" source="~/assets/images/Teams-task-module/youtube-select_1.png" alt-text="YouTube select":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="./assets/images/Teams-task-module/final-image.png" alt-text="Screenshot shows the final output of the dialog.":::

- content: |
    You've completed the tutorial to get started with Teams dialog app!
