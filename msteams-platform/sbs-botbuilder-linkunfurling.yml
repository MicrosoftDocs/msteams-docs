### YamlMime:Tutorial
title: Unfurl links in Teams using bot
metadata:
  title: Unfurl links in Teams using bot
  description: Learn how to set up Teams link unfurling bot. This guide helps you to register your app and receive an invoke activity.
  audience: Developer
  level: Beginner
  ms.date: 01/20/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/link-unfurling.md
  nextTutorialTitle: Read more on link unfurling
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Microsoft Bot Framework extends the cards specification by adding a set of predefined cards that bots can use as a part of bot messaging. Link unfurling using bot in Teams helps you to register your app and helps to receive an invoke activity, when the URL with domain is pasted into the compose message area. The invoke activity contains the full URL and you can respond with a card. Users can unfurl the link using bot with additional information to get an enhanced experience.

     > [!NOTE]
     > Link unfurling isn't supported on mobile clients.

     **Key features of link unfurling** 

     * Allows user to paste URLs and respond with a card.
     * Allows user to register the app and receives invoke activity.

    This step-by-step guide helps you to create a bot to perform link unfurling in Microsoft Teams for `https://www.BotFramework.com`. You'll see the following output:

    :::image type="content" source="~/assets/images/Teams-link-unfurling/final-image.png" alt-text="Screenshot shows link unfurling.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment: 

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
      | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

- title: Set up local environment
  durationInMinutes: 1
  content: | 

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)] 

- title: Register Microsoft Entra app 
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:

    * Create and register your Azure app. 
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot to Teams channel.
    * Use ngrok to create a tunnel to your web server's endpoints.
    * Add messaging endpoint to the ngrok tunnel you created.

    [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

      # [dev tunnel](#tab/dev)

      [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

      # [ngrok](#tab/ngrok)
      
      [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

      ---     

    [!INCLUDE [Azure web authentication](includes/get-started/azure-web-authentication.md)]
    
    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]

    [!INCLUDE [Client secret](includes/get-started/azure-api-permissions.md)]

    [!INCLUDE [Application ID URI](includes/get-started/application-id-uri.md)]

    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

- title: Create your bot 
  durationInMinutes: 1
  content: | 
    [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]    

    [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

    [!INCLUDE [Messaging endpoint](includes/get-started/messaging-endpoint.md)]

    [!INCLUDE [Service connection](includes/get-started/oauth-connection-settings.md)]
            

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Go to the **appsettings.json** file in cloned repository.
 
       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/appsettings-file-location.png" alt-text="Screenshot showing the navigation of app settings location.":::
      
    1. Open the **appsettings.json** file and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secrets **Value**.
         * Set `"MicrosoftAppTenantId"` as blank for MultiTenant bot.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/appsettings-json.png" alt-text="Screenshot showing the app settings.":::
        
    1. Go to the **manifest.json** file in cloned repository.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manifest-file-location.png" alt-text="Screenshot showing the manifest file location.":::
        
    1. Open the **manifest.json** file.

    1. Add the following code snippet to your manifest file, if not already present:

       ```json
       "bots": [
        {
          "botId": "<<YOUR-MICROSOFT-APP-ID>>",
          "scopes": [
            "personal",
            "team",
            "groupchat"
          ],
          "supportsFiles": false,
          "isNotificationOnly": false
        }      
       ```

    1. Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with your bot's **Microsoft App ID**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manifest_1.png" alt-text="Screenshot showing the replacement of Microsoft App ID.":::
      
- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service, use the latest version of Visual Studio  or Command line.

    # [Visual Studio](#tab/vs)

       1. Open Visual Studio.
       1. Go to **File** > **Open** > **Project/Solution...**.

          :::image type="content" source="~/assets/images/Teams-link-unfurling/VSopenfile_1.png" alt-text="Screenshot showing the navigation of open file.":::
          
       1. Select **TeamsLinkUnfurling.csproj** file from **samples** > **msgext-link-unfurling** > **csharp** folder.

          :::image type="content" source="~/assets/images/Teams-link-unfurling/project-file-location.png" alt-text="Screenshot showing the select of folder.":::
      
       1. From **View**, open **Solution Explorer**.

          :::image type="content" source="~/assets/images/Teams-link-unfurling/solutionexplorer_1.png" alt-text="Screenshot showing the Solution Explorer.":::
          
       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/certificate_1.png" alt-text="Screenshot showing the trust Certificate.":::
          
          A webpage opens with a message **Your bot is ready!**

          :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/appisready.png" alt-text="Screenshot showing the webpage saying bot is ready.":::
                  
    # [Command line](#tab/cli)

    Go to **Microsoft-Teams-Samples** > **samples** > **msgext-link-unfurling** > **csharp** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
    :::image type="content" source="~/assets/images/Teams-link-unfurling/dotnet-run-command.png" alt-text="Screenshot showing the dotnet run in bash.":::

      ---

- title: Upload Link Unfurling app
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **samples** > **msgext-link-unfurling** > **csharp** > **TeamsAppManifest**.

    1. Create a .zip file with the following files that are present in the **Manifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

         :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/manifest-file-zip.png" alt-text="Screenshot showing the zipping of file.":::
       
    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**
    1. Look for the option to **Upload a custom app**. If you see the option, custom app upload is enabled.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/custom-upload.png" alt-text="Upload custom app":::
      
    1. Select the .zip file you've created in the **TeamsAppManifest** folder and select **Open**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/upload-manifest-zip.png" alt-text="Screenshot showing the selection of zip file.":::
      
    1. Select **Add**.

       :::image type="content" source="~/assets/images/Teams-link-unfurling/addapp.png" alt-text="Screenshot shows the adding of app.":::
         
    1. In the compose message area, enter `https://www.BotFramework.com`.

       The link unfurls as shown in the following image:

       :::image type="content" source="~/assets/images/Teams-link-unfurling/result.png" alt-text="Screenshot showing the Link unfurling result.":::
       
    1. Select **Send**.

       :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/result-1.png" alt-text="Screenshot showing the output.":::
 
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    :::image type="content" source="../msteams-platform/assets/images/Teams-link-unfurling/final-image.png" alt-text="Screenshot showing the final output.":::

- content: |
    You've completed the tutorial to get started with Teams link unfurling app!
