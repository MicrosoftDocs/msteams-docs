### YamlMime:Tutorial
title: Send activity feed notification
metadata:
  title: Send activity feed notification
  description: In this tutorial, you'll learn to broadcast a message to all members of organization using activity feed notification.
  audience: Developer
  level: Beginner
  ms.date: 04/08/2022 
  ms.topic: interactive-tutorial
  nextTutorialHref: concepts/design/activity-feed-notifications.md
  nextTutorialTitle: Read more on activity feed notifications
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    The Microsoft Teams activity feed notification helps users to assess items that require attention by notifying the changes. To extend the activity feed notification functionality to your app use the activity feed notification APIs in Microsoft Graph.
    

    Key features of the activity feed broadcast are:

    * Provides enhanced experience.
    * Keeps users up to date.
    * Broadcasts message for all the members.
    * Displays activity feed notification.
    * Broadcasts details available for members.

    This step-by-step guide helps you to broadcast messages and notify all the members of an organization using activity feed notification. You can see the following output:

      :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/msg-broadcast-output-ready.png" alt-text="Screenshot shows the output of feed broadcast." lightbox="~/assets/images/sbs-graphactivity-feedbroadcast/message-broadcast-output-ready.png" border="true":::

      :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/notification-recipient.png" alt-text="Screenshot shows the final output of activity feed notification." border="true"::: 

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com) | You can install the enterprise version in Visual Studio 2022 and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
     | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> Or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm devDependencies). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    Ensure you've the following accounts and set up your development environment:
    
    * [Microsoft](https://teams.microsoft.com/) account.
    * The Teams app must be installed for the recipient, either personally, or in a team or chat.
    * The Tenant ID for sending and receiving notifications must match.
 
    ## Set up your Teams development tenant

    A tenant is like a space or a container where you chat, share files, and run meetings for your organization in Teams. You can also upload and test the custom app.

    ### Check for custom app upload option

    After creating the app, you must load your app in Teams without distributing it. The function is known as custom app upload. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Custom app upload is necessary for previewing and testing apps in Teams local environment. Enable custom app upload to preview and test your app in Teams locally.

    Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    To verify custom upload apps in Teams:

      1. In the Teams client, select the **Apps** icon.
      1. Select **Manage your apps**.
      1. Select **Upload an app**.
      1. Look for the option to **Upload a custom app**.

         :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/upload-app.png" alt-text="Screenshot shows the custom upload app in Teams.":::

         > [!NOTE]
         > Contact Teams administrator, if you can't upload a custom app.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. Select **Set-up E5 subscription** from the welcome screen.
    1. Set up an administrator account. After you finish, the following screen displays.

       :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Microsoft" border="true":::

    1. Sign in to Teams using the new administrator account. Now you can select **Upload a custom app**.

- title: Set up local environment
  durationInMinutes: 1 
  content: | 

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Register your Teams Auth SSO with Microsoft Entra ID
  durationInMinutes: 1
  content: |
    The following steps help you to create and register Teams authentication SSO in Azure portal:

    * Create and register a new application under App registrations.
    * Use ngrok to create a tunnel to your web server's endpoints.
      
    [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

      # [dev tunnel](#tab/dev)

      [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

      # [ngrok](#tab/ngrok)
      
      [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

      ---     

    [!INCLUDE [Application ID URI](includes/get-started/application-id-uri.md)]

      > [!NOTE]
      > If you're using a tunneling service such as ngrok, ensure you update the value whenever your ngrok subdomain updates. For example, `api://f631****.ngrok.io/c4e88a5d-e3d4-47f4-accb-0ef9de3bce8a`, where `f631****.ngrok.io` is the new ngrok subdomain name.

    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

    **Add API Permission**

    1. In the left pane, under **Manage**, select **API permissions**.

    1. Select **+ Add a permission**.

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/add-permission.png" alt-text="Screenshot show the option to select Add permission.":::

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Select the following permissions:

       * Directory.Read.All
       * Directory.ReadWrite.All
       * TeamsActivity.Send
       * TeamsAppInstallation.ReadForUser
       * TeamsAppInstallation.ReadWriteForUser
       * User.Read
    
         > [!NOTE]
          > User. Read is enabled by default.
      
    1. Select **Add permissions**.

         :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/select-add-permissions.png" alt-text="Screenshot shows the various API permissions.":::

    1. Select **+ Add a permission**.

    1. Select **Microsoft Graph**.
 
       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/selectmicrosoftgraph.png" alt-text="Screenshot shows the option to select Microsoft graph." border="true":::

    1. Select **Application permissions**.

        :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/select-graph-permissions1.png" alt-text="Screenshot shows the option to select application permissions." border="true":::

    1. Select the following permissions:</br> 

         * **Directory.Read.All**
         * **TeamsActivity.Send** 
         * **TeamsAppInstallation.ReadForUser.All**

    1. Select **Add permissions**. 

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/request-application-permission.png" alt-text="Screenshot shows the various API permissions." border="true":::

    1. Ensure to grant the admin consent for the required permissions.

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/admin-consent.png" alt-text="Screenshot shows the admin consent message." border="true":::
    1. Ensure to grant the admin consent for the required permissions.

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/admin-consent.png" alt-text="Screenshot shows the admin consent message." border="true":::
     
       > [!NOTE]
         > * If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
         > * Users need to consent to the API permissions only if the Microsoft Entra app is registered in a different tenant.
    
    **Add a web authentication**

    1. In the left pane, under **Manage**, select **Authentication**.

    1. Select **Add a platform** > **Single-page application**.

        :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/platform-web-single-page.png" alt-text="Screenshot shows the selection of web authentication.":::

    1. Enter the redirect URI for your app by appending `auth-end` to the fully qualified domain name. For example, `https://your-devtunnel-domain/auth-end` or `https://your-ngrok-domain/auth-end`.

    1. Under **Implicit grant and hybrid flows**, select the **Access tokens** and **ID tokens** checkboxes.

    1. Select **Configure**.

        :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/configure-web.png" alt-text="Screenshot shows the option to add redirect uri and select implicit grant and hybrid flows.":::

    1. Under **Web**, select **Add URI**.

    1. Enter `https://token.botframework.com/.auth/web/redirect`.

    1. Select **Save**.

        :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/web-add-uri.png" alt-text="Screenshot shows the option to add redirect uri and select implicit grant and hybrid flows.":::

    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]


- title: Set up app settings
  durationInMinutes: 1
  content: |
    1. Go to **appsettings.json** file in cloned repository.

        :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/appsettings-location.png" alt-text="Screenshot shows the location of the app settings file." border="true":::

    1. Open the **appsettings.json** file in the latest version of Visual Studio and update the following information:  

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"TenantID"` to **Directory (tenant) ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"BaseUrl"` to the `[WebAppDomainName]`.
      
             :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/app-settings-details1.png" alt-text="Screenshot shows the changes in the app settings file." border="true":::

- title: Set up manifest file
  durationInMinutes: 1
  content: |
    1. Go to the **manifest.json** file in cloned repository.

          :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/manifest-location-package.png" alt-text="Screenshot shows the location of the app settings file." border="true":::

    1. Open the **manifest.json** file in the latest version of Visual Studio and make the following changes:

         * Replace all occurrences of `<<Microsoft-App-ID>>` with your bot's **Microsoft App ID**.
         * Replace all occurrences of `<<Base_URL>>` with your fully qualified domain name.
         * Set `validDomains` to `[WebAppDomainName]`.

             :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/manifest-file.png" alt-text="Screenshot shows the changes in the manifest file." border="true":::


- title: Build and run the service
  durationInMinutes: 1
  content: |
       1. Open Visual Studio.
       1. Go to **File** > **Open** > **Project/Solution...**.
    
          :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/VSopenfile.png" alt-text="Screenshot shows how to open a project in Visual Studio." border="true":::

       1. Select the **ActivityFeedBroadcast.sln** file from **csharp** folder.

       1. Select **Open**.

          :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/open-project.png" alt-text="creenshot shows how to select the project file." border="true":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/graphactivity-generator-certificate.png" alt-text="Screenshot shows an install certificate window." border="true":::

          A webpage opens with a message, **Your bot is ready!**

          :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/app-is-ready.png" alt-text="Screenshot shows a webpage with a message that your bot is ready." border="true":::

- title: Add activity feed broadcast app to Teams
  durationInMinutes: 1
  content: |      
    1. In your cloned repository, go to  **graph-activity-feed-broadcast** > **csharp** > **ActivityFeedBroadcast** > **AppManifest**.

    1. Create a .zip file with the following files that are present in the **AppManifest** folder: 
       * manifest.json
       * outline.png
       * color.png

           :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/select-zip.png" alt-text="Screenshot shows the created manifest zip file." border="true":::
    
    1. In the Teams client, select the **Apps** icon.

    1. Select **Manage your apps**.

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/manage-apps.png" alt-text="Screenshot shows the manage your apps option in Teams.":::
    
    1. Select **Submit an app to your org**. 

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/submit-an-app-to-your-org.png" alt-text="Screenshot shows the upload an app screen.":::
       
    1. Select **Open** to upload the .zip file that you created in the **AppManifest** folder.

        :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/open-a-custom-app.png" alt-text="Screenshot shows the opening of a custom app." border="true":::

    1. Select **Add**.

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/add-an-app.png" alt-text="Screenshot shows the add app screen." border="true":::
   
- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |

    Let's interact with the app in Teams!

    1. The **BroadcastTab** displays **Message title** and **Message description**.
            
    1. Enter the message title and description**.
    1. Select **Send message**. 

       The Message broadcasted successfully appears.

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/msg-broadcast-output-ready.png" alt-text="Final output" border="true":::

    1. Activity feed notification displays in the **Activity** tab of the recipient with the same Tenant ID.  

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/activity-feed.png" alt-text="Final output" border="true":::

    1. The message details appear on selecting the message.  

       :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/message-members.png" alt-text="Final output" border="true":::
     
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/completion-broadcast-output-ready.png" alt-text="Final output" border="true"::: 

    :::image type="content" source="~/assets/images/sbs-graphactivity-feedbroadcast/completion-notification-recipient.png" alt-text="Final output" border="true"::: 

- content: |
    You've completed the tutorial to get started with the **activity feed broadcast** app!
    
