### YamlMime:Tutorial
title: Build a dashboard in Teams
metadata:
  title: Build a dashboard in Teams
  description: Learn how to create a dashboard tab, add a new widget, and implement Graph API in Teams toolkit.
  audience: Developer
  level: Beginner
  ms.date: 01/06/2023
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/build-a-dashboard-tab-app.md
  nextTutorialTitle: Dashboard, widget, and Graph API call in Teams toolkit
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    This step-by-step guide helps you to create a dashboard tab, add a new widget to the dashboard, and implement Graph API. You see the following output:

    :::image type="content" source="assets/images/sbs-create-a-new-dashboard/dashboard1.png" alt-text="Screenshot shows the final output of dashboard.":::
    
- title: Prerequisites
  durationInMinutes: 1
  content: |

    | Install | For using |
    | --- | --- |    
    | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, or SharePoint Framework (SPFx) build environments. Use version 1.55 or later. |
    | [Teams Toolkit](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension) or [TeamsFx CLI](~/toolkit/TeamsFx-CLI.md) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use Teams Toolkit v5. |
    | [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program) | Teams account with the appropriate permissions to install an app. |
    | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
    | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
    | [Microsoft Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |

- title: Create a new dashboard
  content: |

    Teams Toolkit supports scaffolding and dashboard creation.

    To create a new dashboard:

     1. Select the Teams Toolkit icon in the Visual Studio Code Activity Bar.

     1. Select **Create a New App**.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new teams-app.png" alt-text="Screenshot shows the selection to create new app.":::

     1. Select **Tab** to create a new tab project. 

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-a-new-teams-app-2.png" alt-text="Screenshot shows the selection of new Teams app.":::

     1. Select **Dashboard**.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard-tab-preview.png" alt-text="Screenshot shows the selection of dashboard tab preview.":::

     1. Select **TypeScript** as the programming language.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/programming-language.png" alt-text="Screenshot shows the selection of programming language.":::

     1. Select **Default folder** to store your project root folder in default location.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/default-folder.png" alt-text="Screenshot shows the selection of workspace folder.":::

     1. Enter a suitable name for your app and select **Enter**.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/enter-application-name.png" alt-text="Screenshot shows the selection of application name.":::

        Teams Toolkit creates tab app in few seconds and message appears.
      
        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/teams-app-preview.png" alt-text="Screenshot shows the teams tab app dashboard preview in VS Code.":::

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard-debug.png" alt-text="Screenshot shows the local debug.":::

     1. Select the Teams Toolkit icon in sidebar.

     1. Select **Sign in to Microsoft 365**. A prompt appears.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/M365-account-signin.png" alt-text="Screenshot shows the Microsoft sign in.":::

     1. Select **Sign in**.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/account-signin.png" alt-text="Screenshot shows the Microsoft sign in.":::

     1. Select the **F5** key to run the application in debug mode.

     1. Select **Add**.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/teams-dashboard-add.png" alt-text="Screenshot shows the selection of workspace folder.":::

        Teams app successfully creates the tab app dashboard.

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dashboard.png" alt-text="Screenshot shows user profile information and recent Teams activity.":::

        Teams app also supports different themes, including dark and high contrast themes.

        # [Dark theme](#tab/darktheme)

        The following image shows the use of Dark theme in the Teams desktop client:

           :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/dark-mode.png" alt-text="Screenshot shows the contrast themes.":::

        # [High contrast theme](#tab/highcontrasttheme)

        The following image shows the use of High contrast theme in the Teams desktop client:

           :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/high-contrast.png" alt-text="Screenshot shows the contrast themes.":::

        ---

      In TeamsFX CLI,

      * If you prefer interactive mode, execute `teamsfx new` command, then use the keyboard to go through the same flow as in Visual Studio Code.

      * If you prefer non-interactive mode, enter all required parameters in one command:

        `teamsfx new--interactive false--capabilities "dashboard-tab"--programming-language "TypeScript"--folder "./"--app-name dashboard-cli-001`

- title: Take a tour of the app source code
  durationInMinutes: 2
  content: |       

      The core dashboard implementation is in the tabs folder. This section walks you through the generated code.

      | Folder | Contents |
      | ----- | ----- |
      | `.vscode` | VS Code files for debugging. |
      | `appPackage` | Templates for the Teams application manifest. |
      | `env` | Environment files. |
      | `infra` | Templates for provisioning Azure resources. |
      | `src` | The source code for the dashboard Teams application. |

      The following files provide the business logic for the dashboard tab. You can update them to fit your business logic requirements. The default implementation provides a starting point to help you get started.

      | File | Contents |
      | ----- | ----- |
      | `src/models/chartModel.ts` | Data model for the chart widget. |
      | `src/models/listModel.ts` | Data model for the list widget. |
      | `src/services/chartService.ts` | A data retrieve implementation for the chart widget. |
      | `src/services/listService.ts` | A data retrieve implementation for the list widget. |
      | `src/dashboards/SampleDashboard.tsx` | A sample dashboard layout implementation. |
      | `src/styles/ChartWidget.css` | The chart widget style file. |
      | `src/styles/ListWidget.css` | The list widget style file. |
      | `src/widgets/ChartWidget.tsx` | A widget implementation that can display a chart. |
      | `src/widgets/ListWidget.tsx` | A widget implementation that can display a list. |
      | `src/App.css` | The style of application route. |
      | `src/App.tsx` | Application route. |
      
      The following files are project-related files. Generally, you don't need to customize these files.

      | File | Contents |
      | ----- | ----- |
      | `src/index.css` | The style of application entry point.|
      | `src/index.tsx` | Application entry point. |
      | `src/internal/addNewScopes.ts` | Implementation of new scopes add. |
      | `src/internal/context.ts` | TeamsFx Context. |
      | `src/internal/login.ts` | Implementation of sign-in. |
      | `src/internal/singletonContext.ts` | Implementation of the TeamsUserCredential instance singleton. |
   
- title: Add a widget to the dashboard
  durationInMinutes: 5
  content: |

    To add a new widget to the dashboard, follow these steps:

     1. [Define a data model](#define-a-data-model)
     2. [Create a data retrieve service](#create-a-data-retrieve-service)
     3. [Create a widget file](#create-a-widget-file)
     4. [Add the widget to the dashboard](#add-the-widget-to-the-dashboard)
    
     ## Define a data model

     1. In Visual Studio Code, go to **EXPLORER** > **src** > **models**.
     1. Create a **sampleModel.ts** file.
     1. Add the following code in the **sampleModel.ts** file:

        ```typescript
          export interface SampleModel {
          content: string;
          }
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-model.png" alt-text="Screenshot shows the creation of sampleModel file under the models folder in Visual Studio Code. ":::

     ## Create a data retrieve service
      
      > [!NOTE]
      > You can implement a service to retrieve data from the backend service or from Microsoft Graph API.

     1. In Visual Studio Code, go to **EXPLORER** > **src** > **services**.
     1. Create a **sampleService.ts** file.
     1. Add the following code in the **sampleService.ts** file:

        ```typescript
        import { SampleModel } from "../models/sampleModel";

        export const getSampleData = (): SampleModel => {
          return { content: "Hello world!" };
          };
        ```
        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/service-retrieve.png" alt-text="Screenshot shows the creation of sampleService.ts file under the service folder in Visual Studio Code.":::
    
     ## Create a widget file

     1. In Visual Studio Code, go to **EXPLORER** > **src** > **widgets**.
     1. Create a **SampleWidget.tsx** file.
     1. Add the following code in the **SampleWidget.tsx** file:

        ```typescript
        import { Button, Text } from "@fluentui/react-components";
        import { BaseWidget } from "@microsoft/teamsfx-react";
        import { SampleModel } from "../models/sampleModel";
        import { getSampleData } from "../services/sampleService";
        
        interface SampleWidgetState {
          data?: SampleModel;
        }
        
        export class SampleWidget extends BaseWidget<any, SampleWidgetState> {
          override async getData(): Promise<SampleWidgetState> {
            return { data: getSampleData() };
          }
          
          override header(): JSX.Element | undefined {
            return <Text>Sample Widget</Text>;
          }
          
          override body(): JSX.Element | undefined {
            return <div>{this.state.data?.content}</div>;
          }
          override footer(): JSX.Element | undefined {
            return <Button>View Details</Button>;
          }
        }
        ```

        :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-widget.png" alt-text="Screenshot shows the creation of sampleWidget.tsx under the widgets in Visual Studio Code.":::
      
     ## Add the widget to the dashboard

      To add a widget to the dashboard, follow these steps:

      1. In Visual Studio Code, go to **Explorer** > **src** > **dashboards** > **SampleDashboard.tsx**.
      1. Update the `override layout()` method to add the widget to the dashboard:

          ```typescript
          override layout(): JSX.Element | undefined {
            return (
           <>
                <ListWidget />
                <ChartWidget />
                <SampleWidget />
              </>
            );
          } 
          ```
          ---

          :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/create-sample-dashboard.png" alt-text="Screenshot shows the existing sampleDashboard file in Visual Studio Code."::: 

          Optional: Refer the following code to add your widget in a column:

            ```css
            .one-column {
              display: grid;
              gap: 20 px;
              grid-template-rows: 1fr 1fr;
            }
            ```

            ```typescript
            override layout(): JSX.Element | undefined {
              return (
              <>
                  <ListWidget />
                  <div className="one-column">
                    <ChartWidget />
                    <SampleWidget />
                  </div>
               </>
              );
            }
            ```

            After adding all the relevant details for creating a widget, save the respective files.

            You can view the changed layout and the calendar widget on the dashboard.

            :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/widget-added-to-dashboard.png" alt-text="Screenshot shows the addition of widget to the dashboard with the sample widget highlighted in red. ":::

- title: Add SSO and Graph API call
  durationInMinutes: 5
  content: |

     You learnt how to create a dashboard tab and add a new widget to the dashboard. Let's add Single Sign-on (SSO) and graph API call to the dashboard tab.
     
     ## Add SSO
     
     To add SSO, follow these steps:
       
        <details>
        <summary>1. Create Microsoft Entra app manifest.</summary>

        To create a Microsoft Entra app manifest, follow these steps:

        1. In Visual Studio Code, go to **EXPLORER**.
        1. Create a **aad.manifest.json** file.
        1. Add the following code in **aad.manifest.json** file:

            ```json
            {
              "id": "${{AAD_APP_OBJECT_ID}}",
              "appId": "${{AAD_APP_CLIENT_ID}}",
              "name": "dashboardV5Demo",
              "accessTokenAcceptedVersion": 2,
              "signInAudience": "AzureADMyOrg",
              "optionalClaims": {
                  "idToken": [],
                  "accessToken": [
                      {
                        "name": "idtyp",
                        "source": null,
                        "essential": false,
                        "additionalProperties": []
                      }
                  ],
                  "saml2Token": []
              },
              "requiredResourceAccess": [
                  {
                    "resourceAppId": "Microsoft Graph",
                    "resourceAccess": [
                        {
                          "id": "User.Read", 
                          "type": "Scope"
                        }
                    ]
                  }
              ],
               "oauth2Permissions": [
                  {
                    "adminConsentDescription": "Allows Teams to call the app's web APIs as the current user.",
                    "adminConsentDisplayName": "Teams can access app's web APIs",
                    "id": "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}",
                    "isEnabled": true,
                    "type": "User",
                    "userConsentDescription": "Enable Teams to call this app's web APIs with the same rights that you have",
                    "userConsentDisplayName": "Teams can access app's web APIs and make requests on your behalf",
                    "value": "access_as_user"
                  }
              ],
              "preAuthorizedApplications": [
                  {
                      "appId": "1fec8e78-bce4-4aaf-ab1b-5451cc387264",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  },
                  {
                      "appId": "5e3ce6c0-2b1f-4285-8d4b-75ee78787346",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  },
                  {
                      "appId": "d3590ed6-52b3-4102-aeff-aad2292ab01c",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  },
                  {
                      "appId": "00000002-0000-0ff1-ce00-000000000000",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  },
                  {
                      "appId": "bc59ab01-8403-45c6-8796-ac3ef710b3e3",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  },
                  {
                      "appId": "0ec893e0-5785-4de6-99da-4ed124e5296c",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  },
                  {
                      "appId": "4765445b-32c6-49b0-83e6-1d93765276ca",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  },
                  {
                      "appId": "4345a7b9-9a63-4910-a426-35363201d503",
                      "permissionIds": [
                          "${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}"
                      ]
                  }
              ],
              "identifierUris": [
                "api://${{TAB_DOMAIN}}/${{AAD_APP_CLIENT_ID}}"
              ],
              "replyUrlsWithType": [
                {
                  "url": "${{TAB_ENDPOINT}}/auth-end.html",
                  "type": "Web"
                },
                {
                  "url": "${{TAB_ENDPOINT}}/auth-end.html?clientId=${{AAD_APP_CLIENT_ID}}",
                  "type": "Spa"
                },
                {
                  "url": "${{TAB_ENDPOINT}}/blank-auth-end.html",
                  "type": "Spa"
                }
              ]
            }        
            ```

            :::image type="content" source="assets/images/sbs-create-a-new-dashboard/aad-app-manifest.png" alt-text="Screenshot shows the Microsoft Entra app manifest code addition.":::

        </details>

        <details>
        <summary>2. Update Teams app manifest.</summary>

        To update Teams app manifest, follow these steps:

        1. In Visual Studio Code, go to **EXPLORER** > **appPackage** > **manifest.json**.

        1. Add the following code after the valid domains property in the **manifest.json** file:

           ```json
             "webApplicationInfo": {
             "id": "${{AAD_APP_CLIENT_ID}}",
             "resource": "api://${{TAB_DOMAIN}}/${{AAD_APP_CLIENT_ID}}"
             }
           ```

            :::image type="content" source="assets/images/sbs-create-a-new-dashboard/teams-app-manifest.png" alt-text="Screenshot shows the addition of web application info in manifest. ":::

        </details>

        <details>
        <summary>3. Update Teams Toolkit configuration files.</summary>

        To update Teams Toolkit configuration code in **teamsapp.yml** and **teamsapp.local.yml** files, follow the steps:

        # [teamsapp.yml](#tab/teamsappyml)

        1. Add the code under `provision`.
        
            ```yaml 
              - uses: aadApp/create
                with:
                    name: "YOUR_AAD_APP_NAME"
                    generateClientSecret: true
                    signInAudience: "AzureADMyOrg"
                writeToEnvironmentFile:
                    clientId: AAD_APP_CLIENT_ID
                    clientSecret: SECRET_AAD_APP_CLIENT_SECRET
                    objectId: AAD_APP_OBJECT_ID
                    tenantId: AAD_APP_TENANT_ID
                    authority: AAD_APP_OAUTH_AUTHORITY
                    authorityHost: AAD_APP_OAUTH_AUTHORITY_HOST

              - uses: aadApp/update
                with:
                  manifestPath: "./aad.manifest.json"
                  outputFilePath: ./build/aad.manifest.${{TEAMSFX_ENV}}.json
            ```

            :::image type="content" source="assets/images/sbs-create-a-new-dashboard/ttk-teams-app.png" alt-text="Screenshot shows the addition of aadApp/create and aadApp/update code.":::

        1. Add the following code, under the action `cli/runNpmCommand` and the `build app` name:
        
           ```yaml
             env:
             REACT_APP_CLIENT_ID: ${{AAD_APP_CLIENT_ID}}
             REACT_APP_START_LOGIN_PAGE_URL: ${{TAB_ENDPOINT}}/auth-start.html
           ```

            :::image type="content" source="assets/images/sbs-create-a-new-dashboard/cli-teams-app.png" alt-text="Screenshot shows the information to react code for cli.":::

        # [teamsapp.local.yml](#tab/teamsapplocalyml)
        
        1. Add the code under `provision`.
        
            ```yaml 
              - uses: aadApp/create
                with:
                    name: "YOUR_AAD_APP_NAME"
                    generateClientSecret: true
                    signInAudience: "AzureADMyOrg"
                writeToEnvironmentFile:
                    clientId: AAD_APP_CLIENT_ID
                    clientSecret: SECRET_AAD_APP_CLIENT_SECRET
                    objectId: AAD_APP_OBJECT_ID
                    tenantId: AAD_APP_TENANT_ID
                    authority: AAD_APP_OAUTH_AUTHORITY
                    authorityHost: AAD_APP_OAUTH_AUTHORITY_HOST

              - uses: aadApp/update
                with:
                  manifestPath: "./aad.manifest.json"
                  outputFilePath : ./build/aad.manifest.${{TEAMSFX_ENV}}.json
            ```

            :::image type="content" source="assets/images/sbs-create-a-new-dashboard/ttk-teams-app-local.png" alt-text="Screenshot shows the addition of aadApp/create and aadApp/update code.":::  

        1. Under the action `file/createOrUpdateEnvironmentFile**`, add the following code:
 
            ```yaml
              REACT_APP_CLIENT_ID: ${{AAD_APP_CLIENT_ID}}
              REACT_APP_START_LOGIN_PAGE_URL: ${{TAB_ENDPOINT}}/auth-start.html
            ```

            :::image type="content" source="assets/images/sbs-create-a-new-dashboard/file-teams-app-local.png" alt-text="Screenshot shows the information to react codes.":::

        ---
        
        </details>   

        <details>
        <summary>4. Update source code.</summary>       

        1. Create **auth-start.html** and **auth-end.html** files in **public** folder.
        
           :::image type="content" source="~/assets/images/sbs-create-a-new-dashboard/auth-end-start.png" alt-text="Screenshot shows the folder structure for auth-start and auth-end files.":::

        1. Add the code in **auth-start.html** and **auth-end.html** files.

            # [auth-start](#tab/auth-start)
            
            Add the following code in **auth-start.html**:

            ```html
              <!--The Teams authentication flow process uses this file to assist with retrieval of the access token.-->
              <!--If you're not familiar with this process, don't alter or remove this file from your project.-->
              <html>
                <head>
                  <title>Sign-in Start Page</title>
                  <meta charset="utf-8" />
                </head>

                <body>
                <script src="https://res.cdn.office.net/teams-js/2.7.1/js/MicrosoftTeams.min.js" integrity="sha384-4Gy2G+qxzDVdrdemcVqKVQvaSK1Ghg3x6xcsaMLPc/pw7KPtiogHGM97LTWF2PWg" crossorigin="anonymous"></script>
                  <script
                    type="text/javascript"
                    src="https://alcdn.msauth.net/browser/2.21.0/js/msal-browser.min.js"
                    integrity="sha384-s/NxjjAgw1QgpDhOlVjTceLl4axrp5nqpUbCPOEQy1PqbFit9On6uw2XmEF1eq0s"
                    crossorigin="anonymous">
                  </script>
                  <script type="text/javascript">
                    microsoftTeams.app.initialize().then(() => {
                      microsoftTeams.app.getContext().then(async (context) => {
                        // Generate random state string and store it, so we can verify it in the callback
                        var currentURL = new URL(window.location);
                        var clientId = currentURL.searchParams.get("clientId");
                        var scope = currentURL.searchParams.get("scope");
                        var loginHint = currentURL.searchParams.get("loginHint");

                        const msalConfig = {
                          auth: {
                            clientId: clientId,
                            authority: `https://login.microsoftonline.com/${context.user.tenant.id}`,
                            navigateToLoginRequestUrl: false
                          },
                          cache: {
                            cacheLocation: "sessionStorage",
                          },
                        }

                        const msalInstance = new msal.PublicClientApplication(msalConfig);
                        const scopesArray = scope.split(" ");
                        const scopesRequest = {
                          scopes: scopesArray,
                          redirectUri: window.location.origin + `/auth-end.html?clientId=${clientId}`,
                          loginHint: loginHint
                        };
                        await msalInstance.loginRedirect(scopesRequest);
                      });
                    });
                    </script>
                </body>
              </html>
            ```

            # [auth-end](#tab/auth-end)

            Add the following code in **auth-end.html**:
          
            ```html
              <!--The Teams authentication flow process uses this file to assist with retrieval of the access token.-->
              <!--If you're not familiar with this process, don't alter or remove this file from your project.-->
              <html>
                <head>
                  <title>Sign-in End Page</title>
                  <meta charset="utf-8" />
                </head>

                <body>
                <script src="https://res.cdn.office.net/teams-js/2.7.1/js/MicrosoftTeams.min.js" integrity="sha384-4Gy2G+qxzDVdrdemcVqKVQvaSK1Ghg3x6xcsaMLPc/pw7KPtiogHGM97LTWF2PWg" crossorigin="anonymous"></script>
                  <script
                    type="text/javascript"
                    src="https://alcdn.msauth.net/browser/2.21.0/js/msal-browser.min.js"
                    integrity="sha384-s/NxjjAgw1QgpDhOlVjTceLl4axrp5nqpUbCPOEQy1PqbFit9On6uw2XmEF1eq0s"
                    crossorigin="anonymous">
                  </script>
                  <script type="text/javascript">
                    var currentURL = new URL(window.location);
                    var clientId = currentURL.searchParams.get("clientId");

                    microsoftTeams.app.initialize().then(() => {
                      microsoftTeams.app.getContext().then(async (context) => {
                        const msalConfig = {
                          auth: {
                            clientId: clientId,
                            authority: `https://login.microsoftonline.com/${context.user.tenant.id}`,
                            navigateToLoginRequestUrl: false
                          },
                          cache: {
                            cacheLocation: "sessionStorage",
                          },
                        }

                        const msalInstance = new window.msal.PublicClientApplication(msalConfig);
                        msalInstance.handleRedirectPromise()
                          .then((tokenResponse) => {
                            if (tokenResponse !== null) {
                              microsoftTeams.authentication.notifySuccess(JSON.stringify({
                                sessionStorage: sessionStorage
                              }));
                            } else {
                              microsoftTeams.authentication.notifyFailure("Get empty response.");
                            }
                          })
                          .catch((error) => {
                            microsoftTeams.authentication.notifyFailure(JSON.stringify(error));
                          });
                      });
                    });
                  </script>
                </body>
              </html>
            ```  
                
            ---

        </details> 

       You added the SSO files to your project and need to call Graph APIs next. 
          
     ## Add Graph API call
     
     To add Graph API, follow these steps:
   
      TeamsFx SDK implements the graph API call. 

     1. In Visual Studio Code, go to **EXPLORER** > **src** > **services** > **listService.ts**.

     1. Update the following code in the **listService.ts**:        

        ```typescript
        /**
          * Retrieve sample data
          * @returns data for list widget
          */
        import {TeamsUserCredentialContext} from "../internal/singletonContext";
        import {
          createMicrosoftGraphClientWithCredential,
          TeamsUserCredential,
          } from "@microsoft/teamsfx";
          import { ListModel } from "../models/listModel";
          import { loginAction } from "../internal/login";
                
        export const getListData = async (): Promise<ListModel[]> => {
          await loginAction(["User.Read"]);
          let credential = TeamsUserCredentialContext.getInstance().getCredential();
          const graphClient = createMicrosoftGraphClientWithCredential(credential, [
            "User.Read",
          ]);
          const me = await graphClient.api("/me").get();
          return [
            {
              id: me.id,
              title: me.displayName,
              content: me.mail,
            },
          ];

          // {
          //   id: "id1",
          //   title: "Sample title",
          //   content: "Sample description",
          // },
          // {
          //   id: "id2",
          //   title: "Sample title",
          //   content: "Sample description",
          // },
          // {
          //   id: "id3",
          //   title: "Sample title",
          //   content: "Sample description",
          // },
        }
        ```

      1. Go to **EXPLORER** > **src** > **widgets** > **ListWidget.tsx**.

      1. Update the `export default class ListWidget()` to add user profile widget.

         ```typescript
          export default class ListWidget extends BaseWidget<any, IListWidgetState> {
            async getData(): Promise<IListWidgetState> {
              return { data: await getListData() };
         ```

      1. SSO and Graph API shows the signed-in user profile in the list widget. 

         :::image type="content" source="assets/images/sbs-create-a-new-dashboard/your-list.png" alt-text="Screenshot shows the new your list widget highlighted in red.":::

- title: Complete challenge
  durationInMinutes: 5
  content: |

      Did you come up with something like this?

        :::image type="content" source="assets/images/sbs-create-a-new-dashboard/dashboard1.png" alt-text="Screenshot shows the final output of dashboard.":::


- title: Congratulations!
  durationInMinutes: 5
  content: |

    You completed the tutorial!
