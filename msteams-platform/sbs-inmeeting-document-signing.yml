### YamlMime:Tutorial
title: Build in-meeting document signing
metadata:
  title: Build in-meeting document signing app
  description: With this learning module, learn how to build in-meeting document signing app in Teams.
  audience: Developer
  level: Beginner
  ms.date: 27/07/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/build-apps-for-teams-meeting-stage.md
  nextTutorialTitle: Read more to build apps for Teams meeting stage
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Meeting signing is a Microsoft Teams sample app that enables users to sign documents in real time scenarios. It provides enhanced experience by allowing the users to review and sign documents in a single session during meetings.
    This sample lets users electronically sign documents with their current tenant identity. The users can sign the following documents during meetings:
    * Purchase agreements.
    * Purchase orders.
    
    The template is also applicable for other scenarios, such as for reviewing and approving code samples and collaborative documents.
    The users can customize to incorporate other types of signatures: 
    * Handwritten signatures.
    * Certificate-based signatures.

    This step-by-step guide helps you to build in-meeting document signing app. You'll see the following output after you've completed this guide:

      :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/final-output.png" alt-text="Screenshot shows the final output screen.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools to set up your development environment:

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
     | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm devDependencies). |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
      > [!TIP]
      > Ensure the Microsoft Teams account isn't a guest account.

    ## Set up your Teams development tenant

       A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where you upload and test your custom app. Let's verify if you're ready to develop with the tenant.

    ### Check for custom app upload option

       After creating the app, you must load your app in Teams without distributing it. This process is known as custom app upload. Sign in to your Microsoft 365 account to view this option.

       > [!NOTE]
       > Custom app upload is necessary for previewing and testing apps in Teams local environment. Enable custom app upload to preview and test your app in Teams locally.

       Do you already have a tenant, and do you have admin access? Let's check if you really do!

    To verify upload apps in Teams:

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a custom app**. If you see the option, custom app upload is enabled.

        :::image type="content" source="../msteams-platform/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png" alt-text=" Screenshot shows the option to upload a custom app in Teams.":::

        > [!NOTE]
        > Contact your Teams administrator, if you don't find the option to upload a custom app.  

- title: Set up local environment
  durationInMinutes: 1
  content: |  

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Update the Microsoft Entra app registration
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:
    
    * Create and register your Microsoft Entra ID. 
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot.
    * Create a tunnel to your web server's endpoints using dev tunnel (recommended) or ngrok.
    * Add messaging endpoint to the dev tunnel that you created.

    [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

    # [dev tunnel](#tab/dev)

    [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

    # [ngrok](#tab/ngrok)

    [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

    ---
      
    [!INCLUDE [Azure web authentication](includes/get-started/azure-web-authentication.md)]
    
    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]

    **Add API permissions**

    1. In the left pane, select **API permissions**. 

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-api-permissions.png" alt-text="Screenshot shows how to select API permissions."::: 
        
       > [!NOTE]
       > Users need to consent to these permissions only if the Microsoft Entra app is registered in a different tenant.

    1. Select **+ Add a permission**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-api-permission.png" alt-text="Screenshot shows the option to select Add permission.":::

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Select the following permissions:
        * **OpenId permissions** > **email**, **offline_access**, **openid**, **profile**.
        * **User** > **User.Read**, **User.ReadBasic.All**

    1. Select **Add permissions**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/select-api-permission.png" alt-text="Screenshot show the option to select permissions.":::

    [!INCLUDE [Application ID URI](includes/get-started/application-id-uri.md)]

    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

- title: Create your bot
  durationInMinutes: 1
  content: |

    [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]    

    [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

    [!INCLUDE [Messaging endpoint](includes/get-started/messaging-endpoint.md)]

- title: Set up app settings, manifest and env files
  durationInMinutes: 1
  content: |
    After you've configured the Microsoft Entra app, you need to configure app details in the app settings, manifest and env file. 

    **To configure app settings**

    1. Go to the **appsettings.json** file in the cloned repository.

          :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/appsettingslocation.png" alt-text="Screenshot shows the app settings file location.":::

    1. Open the **appsettings.json** file and update the following information: 

         * Set `"ClientId"` to your app's **Microsoft App ID**.
         * Set `"ClientSecret"` to your app's client secret **Value**.
         * Set `"Audience"` to your app's **Application ID URI**.

          :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-settings.png" alt-text="App settings"::: 

    **To configure app manifest file**

    1. Go to the **manifest.json** file in the cloned repository.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/manifestlocation.png" alt-text="Screenshot shows the manifest file location.":::
    
    1. Open the **manifest.json** file and update the following information.

         * Set `"ID"` to **Microsoft App ID**.
         * Replace all occurrences of `"deployment-url"` with your fully qualified ngrok or devtunnel domain name.
         * Replace all occurrences of `"aad-id"` with your app's **Microsoft App ID**.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/manifest-update-file.png" alt-text="Screenshot shows the changes in the manifest file." lightbox="~/assets\images\sbs-inmeeting-doc-signing\manifest.png":::

    **To configure env file**

    1. Go to the **.env** file in the cloned repository.
    
         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/env-location.png" alt-text="Screenshot shows the env file location.":::

    1. Open the **.env** file and update the following information.

          * Set `REACT_APP_AAD_CLIENT_ID` to your app's **Microsoft App ID**.
          * Set `REACT_APP_MSA_ONLY_CLIENT` to your app's **Microsoft App ID**.
          * Set `REACT_APP_MSA_ONLY_SCOPE` to your app's client secret **Value**..
  
          :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/env-file.png" alt-text="Screenshot shows the env file.":::


- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service using Visual Studio.

       1. Open **Visual Studio**.

       1. Go to **File** > **Open** > **Project/Solution...**.
    
           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/project-solution.png" alt-text="Screenshot shows how to open a project in Visual Studio.":::

       1. Open the **MeetingSigning.sln** file in Visual Studio.

           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/Tokenfileready.png" alt-text="Screenshot shows how to select the project file.":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

            :::image type="content" source="~/assets/images/meetings-side-panel/certificate.png" alt-text="Screenshot shows an install certificate window.":::

          The following webpage opens.

           :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/app-ready.png" alt-text="Screenshot shows a webpage with a message to install the app in Teams.":::

- title: Add Meeting Signing app to Teams
  durationInMinutes: 1
  content: |

    1. In your cloned repository, go to **Source > MeetingSigning.Web > AppManifest**.

    1. Create a .zip file with the following files that are present in the **AppManifest** folder:

       * manifest.json
       * outlineIcon.png
       * colorIcon.png

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/zipfile.png" alt-text="Screenshot shows the created zip file."::: 
    
    1. Create a meeting in Teams with a few presenters and attendees.

    1. Join the meeting.
   
    1. After the meeting has started, select **Apps**.
    
    1. In the pop-up window, select **Manage apps**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-app-teams.png" alt-text="Screenshot shows how to add an app in a meeting.":::
    
    1. Select **Upload an app**.

    1. Select the .zip file you've created in the **AppManifest** folder and select **Open**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-zip-file.png" alt-text="Screenshot shows how to open a custom app."::: 

    1. Select **Add**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/select-add.png" alt-text="Screenshot shows how to add the app.":::

       Now the meeting signing app is added to the meeting.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-app-to-meeting.png" alt-text="Screenshot shows the app added to the meeting.":::
    
    1. Go back to the meeting details page, and select **Apps** > **Meeting Signing** app.
        
        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/add-meeting-signing-app.png" alt-text="Screenshot shows how to add the app to a live meeting.":::

    1. Select **Save**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/install-meeting-signing.png" alt-text="Screenshot shows the completed install of the meeting signing app."::: 

       The Meeting Signing app is visible in the meeting window.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/meeting-app.png" alt-text="Screenshot shows the meeting signing app in the meeting window.":::        

    1. Go to the meeting chat in Teams, and select the **Meeting Signing** tab, and then select **Create Documents**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/create-documentation.png" alt-text="Screenshot shows the create documentation option.":::

    1. Enter the following details in the Meeting Signing window.

        1. Select the required documents that you want to review. 
        1. Enter viewers of the documents.
        1. Enter signers of the documents.
        1. Select **Done**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/create-documents.png" alt-text="Screenshot shows the creation of a documentation in a meeting."::: 

    1. Select **Consent** to give permission to the app to access data from your account.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/give-consent.png" alt-text="Screenshot shows how to give consent."::: 

    1. Sign in into Teams with your credentials and select **Sign in**.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/teams-login-after-consent.png" alt-text="Screenshot shows Teams login after giving consent.":::

       In Teams, you'll get a notification for successfully creating the document.

        :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/doc-success-upload.png" alt-text="Screenshot shows a document created success message.":::          

     1. Go back to Teams meeting, and now you can view the documents in the side panel. 
     
     1. Select **Share to meeting** to share the document in meeting.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/view-doc-in-sidepanel.png" alt-text="Screenshot shows the document in the the meeting side panel.":::

        The following image shows the document shared in the meeting.

         :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/final-output.png" alt-text="Screenshot shows the final output for the meeting signing app."::: 

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

       :::image type="content" source="~/assets/images/sbs-inmeeting-doc-signing/final-output.png" alt-text="Screenshot shows the final output for the meeting signing app."::: 

- content: |
    Congratulations! You've completed the tutorial to create the **In-meeting Signing** app!
