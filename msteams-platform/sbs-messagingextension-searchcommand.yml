### YamlMime:Tutorial
title: Build search based message extension
metadata:
  title: Build search based message extension
  description: Learn how to build a search based message extension for Microsoft Teams, which allows users to search external systems.
  audience: Developer
  level: Beginner
  ms.date: 01/27/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: messaging-extensions/how-to/search-commands/define-search-command.md
  nextTutorialTitle: Read more on search commands
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Message extension allow users to interact with web services in the Microsoft Teams client. They help to search in an external system from the compose message area, the command box, or directly from a message. 
    
    **Key features of search based message extension:**

    * Allow users to search external systems.
    * Insert search results into a message in the form of a card.

    This step-by-step guide helps you to build a search based message extension. You'll see the following output:

    :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/output.png" alt-text="Screenshot shows the search based message extension output after you have successfully completed the step-by-step guide.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure you install the following tools and set up your development environment:  

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com) | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. If you haven't installed the latest version, install the portable version. |
     | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

- title: Set up local environment
  durationInMinutes: 1
  content: |

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Register Microsoft Entra app
  durationInMinutes: 5
  content: |
    Register your bot with Azure Bot service when you develop and host it in Azure. Following are the steps:
 
    * Create and register your Azure app. 
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot.
    * Create a tunnel to your web server's endpoints using dev tunnel (recommended) or ngrok.
    * Add messaging endpoint to the dev tunnel that you created.

    [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

      # [dev tunnel](#tab/dev)

      [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

      # [ngrok](#tab/ngrok)
      
      [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

      ---     

    [!INCLUDE [Azure web authentication](includes/get-started/azure-web-authentication.md)]
    
    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]
    
    [!INCLUDE [API Permission](includes/get-started/azure-api-permissions.md)]

    [!INCLUDE [Application ID URI](includes/get-started/application-id-uri.md)]

    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

- title: Create your bot 
  durationInMinutes: 1
  content: |

    [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]    

    [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

    [!INCLUDE [Messaging endpoint](includes/get-started/messaging-endpoint.md)]

- title: Set up app settings and manifest files
  durationInMinutes: 1
  content: |
    1. Go to the **appsettings.json** file in the cloned repository.

        :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/appsettings-location.png" alt-text="Screenshot of cloned repository with the file path and appsettings JSON file highlighted in red.":::
    
    1. Open the **appsettings.json** file and update the following information:  

         * Set `"MicrosoftAppType"` to **MultiTenant**.
         * Set `"MicrosoftAppId"` to bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to **Value** of **Client secret**.
         * Set `"MicrosoftAppTenantId"` as blank.
         * Set `"BaseUrl"` to the fully qualified domain name.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/appsettings-file.png" alt-text="Screenshot of appsettings JSON file with appsettings information.":::

    1. Go to the **manifest.json** file in the cloned repository.

        :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/manifest-json-location.png" alt-text="Screenshot of Teams App Manifest folder with the file path and manifest file highlighted in red.":::

    1. Open the **manifest.json** file and make the following changes:

         * Replace `<<YOUR-BASE-URL-DOMAIN>>` with `WebAppDomain` name.
         * Replace all occurrences of `<<YOUR-MICROSOFT-APP-ID>>` with bot's **Microsoft App ID**.

        :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/manifest-file.png" alt-text="Screenshot of manifest page with the ID, bot ID, and Valid domains highlighted in red.":::

- title: Build and run the service
  durationInMinutes: 1
  content: |
    To build and run the service, use Visual Studio or Command line.

    # [Visual Studio](#tab/latestversionofvisualstudio)

       1. Open Visual Studio.

       1. Go to **File** > **Open** > **Project/Solution...**.
    
          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/VS-open-file.png" alt-text="Screenshot of Visual Studio with the File, Open, and Project/Solution highlighted in red.":::

       1. Open the **TeamsMessagingExtensionsSearch.csproj** file in Visual Studio.

          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/file-ready.png" alt-text="Screenshot of cloned repository with the TeamsMessagingExtensionsSearch.csproj highlighted in red.":::

       1. From **View**, select **Solution Explorer** .

          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/solution-explorer.png" alt-text="Screenshot of Visual Studio with the menu item Solution Explorer under View is highlighted in red.":::

       1. Right-click to select **TeamsMessagingExtensionsSearch**.

       1. Select **Set as Startup Project**.

          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/start-up.png" alt-text="Screenshot of Solution Explorer with Set as Startup Project and TeamsMessagingExtensionsSearch highlighted in red.":::

       1. Press **F5** to run the project.
    
       1. Select **Yes** if the following dialog appears:

          :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/certificate.png" alt-text="Screenshot of Security Warning with the Yes option highlighted in red.":::

          A webpage opens with a message **Your bot is ready!**.

          :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/appisready.png" alt-text="Screenshot of the webpage that displays Your bot is ready."::: 
   
    # [Command line](#tab/cli)

    Go to **Microsoft-Teams-Samples** > **samples** > **msgext-search** > **csharp** in Command Prompt window and enter the following command:

    ```bash
    dotnet run
    ```
    :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/dotnetruncmd.PNG" alt-text="Screenshot displaying the Command Prompt - dotnet run.":::
   
    ![Dotnet](~/assets/images/Teams-Messaging-Extensions-Search/dotnet-run-command.png)

- title: Add Search Message Extension app
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **samples** > **msgext-search** > **csharp** > **TeamsAppManifest**.

    1. Create a .zip with the following files that are present in the **TeamsAppManifest** folder: 
       * manifest.json
       * icon-outline.png
       * icon-color.png

       :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/zip-file.png" alt-text="Screenshot of cloned repository with the Search Command zip file highlighted in red."::: 

    1. In the Teams client, select the **Apps** icon.

    1. Select **Manage your apps**.

    1. Select **Upload an app**.

    1. Look for the option to **Upload a custom app**. If you see the option, app upload is enabled.

       :::image type="content" source="~/assets/images/tab-device-permission/custom-upload.png" alt-text="Screenshot shows the upload a custom app.":::

        > [!NOTE]
        > Contact your Teams administrator, if you don't find the option to upload a custom app.

    1. Select **Open** to upload the **Search Command**.zip file that you created in the **TeamsAppManifest** folder.

       :::image type="content" source="~/assets/images/Teams-Messaging-Extensions-Search/selectzip-open.png" alt-text="Screenshot of the cloned repository with the Search Command zip file and Open option highlighted in red.":::

    1. Select **Add**.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/me-addapp.png" alt-text="Screenshot of Search Messaging Extension in Teams with the Add option highlighted in red.":::

- title: Interact with the app in Teams
  durationInMinutes: 1
  content: |
    1. Select any option from the pop-up list.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/popup.png" alt-text="Screenshot of a pop-up window opens in a chat displaying the option of your search query.":::
   
    1. Enter a text and select **Send**.

       :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/option1.png" alt-text="Screenshot of compose message box with the options from pop-up chat being displayed.":::

       1. Select **Nuget Package**.

          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/nuget-package.png" alt-text="Screenshot of nuget webpage displaying the nuget package details.":::

       1. Select **Project**.

          :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/project.png" alt-text="Screenshot of GitHub webpage displaying the project details.":::

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    :::image type="content" source="./assets/images/Teams-Messaging-Extensions-Search/final_output.png" alt-text="Screenshot of the search based message extension output after you have successfully completed the step-by-step guide.":::

- content: |
    You've completed the tutorial to get started with Teams message extensions search!
