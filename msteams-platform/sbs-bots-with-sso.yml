### YamlMime:Tutorial
title: Build a bot with SSO authentication
metadata:
  title: Build a bot with SSO authentication
  description: In this tutorial, you'll learn to build a bot with SSO authentication.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: bots/how-to/authentication/auth-aad-sso-bots.md
  nextTutorialTitle: Read more on bot authentication
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Conversational bots in Microsoft Teams perform repetitive automated tasks initiated by users, such as customer service. The user needs to sign in multiple times without single sign-on (SSO) authentication. With SSO authentication methods, the users don't need to sign in to the bot multiple times.
    
    A bot behaves differently depending on the conversation it's involved in:

    * Bots in channel and group chat conversations require the users to @mention the bot.
    * Bots in a one-to-one conversation don't require an @mention. All messages sent by the user routes to the bot.
    
    This step-by-step guide helps you to build a bot with SSO authentication. You'll see the following output:

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text=" Screenshot of the bot with SSO authentication output after you’ve successfully completed the step-by-step guide.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:  

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) |  Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and calls all in one place. |
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com) | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |

      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).

    ## Set up your Teams development tenant

    A tenant is like a space or a container where you chat, share files, and run meetings for your organization in Teams. You can also upload and test the custom app.

    ### Check for custom app upload option

    After creating the app, you must load your app in Teams without distributing it. This process is known as custom app upload. Sign in to your Microsoft 365 account to view this option.

     > [!NOTE]
     > Custom app upload is necessary for previewing and testing apps in Teams local environment. Enable app upload to preview and test your app in Teams locally.

    Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    To verify custom upload apps in Teams:

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**
    1. Look for the option **Upload a custom app**. If you see the option, custom app upload is enabled.

        :::image type="content" source="~/assets/images/bots/upload-a-custom-app-sso-bot-authentication.png" alt-text="Screenshot showing the Teams apps, Manage your apps, Upload an app and Upload a custom app highlighted in red.":::

        > [!NOTE]
        > Contact Teams administrator, if you don't have the option to upload a custom app.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams developer account, you can get it for free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. In the welcome screen, select **Setup E5 subscription**.
    1. Set up an administrator account. After you finish, the following screen displays.

          :::image type="content" source="~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png" alt-text="Screenshot of the Microsoft 365 Developer Program subscription.":::

    1. Sign in to Teams using the new administrator account you just set up. Verify that you’ve the **Upload a custom app** option in Teams.

- title: Set up local environment
  durationInMinutes: 1
  content: | 

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Register Microsoft Entra app 
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in the Azure portal:
    
    * Create and register your Azure app. 
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot.
    * Create a tunnel to your web server's endpoints using dev tunnel (recommended) or ngrok.
    * Add messaging endpoint to the dev tunnel that you created.

    [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

      # [dev tunnel](#tab/dev)

      [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

      # [ngrok](#tab/ngrok)
      
      [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

      ---     

    [!INCLUDE [Azure web authentication](includes/get-started/azure-web-authentication.md)]
    
    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]

    **Add API permissions**

    1. In the left pane, select **API permissions**. 

    1. Select **+ Add a permission**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-api-permission.png" alt-text="Screenshot shows the option to select Add permission.":::

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Select **User** > **User.Read**.

    1. Select **Add permissions**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/select-api-permission.png" alt-text="Screenshot show the option to select permissions.":::

      > [!NOTE]
      > If an app isn't granted IT admin consent, users must provide consent the first time they use an app.
      > Users need to consent to the API permissions only if the Microsoft Entra app is registered in a different tenant.


    **Application ID URI**

    1. In the left pane, under **Manage**, select **Expose an API**.

    1. Next to **Application ID URI**, select **Add**.

       :::image type="content" source="~/assets/images/bots/expose-api-add-uri.png" alt-text="Screenshot shows the option to add Application ID URI.":::

    1. Update the **Application ID URI** in the `api://botid-{AppID}` format and select **Save**.

       :::image type="content" source="~/assets/images/bots/app-id-uri1.png" alt-text="Screenshot shows the option to add the app ID URI and save.":::

    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

    [!INCLUDE [Manifest](includes/get-started/azure-manifest.md)]

- title: Create your bot 
  durationInMinutes: 5
  content: |

    [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]    

    [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

    [!INCLUDE [Messaging endpoint](includes/get-started/messaging-endpoint.md)]

    [!INCLUDE [Service connection](includes/get-started/oauth-connection-settings.md)]

- title: Set up app settings and manifest files
  durationInMinutes: 2
  content: |
    1. Go to the **appsettings.json** file in the cloned repository.

       :::image type="content" source="~/assets/images/teams-file-upload-bot/appsettings-file-location-bot-sso.png" alt-text="Screenshot shows the location of appsettings json file.":::
    
    1. Open the **appsettings.json** file and update the following information:

       * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
       * Set `"MicrosoftAppPassword"` to your bot's client secret ID **value**.
       * Set `ConnectionName` as OAuth connection name.
       * Set `"MicrosoftAppType"` to **MultiTenant**.
       * Set `"MicrosoftAppTenantId"` to **common**.

       :::image type="content" source="~/assets/images/teams-file-upload-bot/appsettings-json-bot-sso.png" alt-text="Screenshot shows the appsettings json.":::

    1. Go to the **manifest.json** file in the cloned repository.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manifest-file-location.png" alt-text="Screenshot shows the selection of manifest json file.":::
         
    1. Open the **manifest.json** file and update the following changes:
    
       * Replace all occurrences of `"{TODO: MicrosoftAppId}"` with your **Microsoft App ID**.
       * Set `"<<domain-name>>"` to your ngrok or dev tunnel domain.
 
       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manifest-bot-id-botsso.png" alt-text="Screenshot shows the details filled in the manifest file in visual studio.":::



- title: Build and run the service
  durationInMinutes: 1
  content: |
    1. Open Visual Studio.    
    
    1. Go to **File** > **Open** > **Project/Solution...**.

        :::image type="content" source="~/assets/images/bots/project-solution_1.png" alt-text="Screenshot of Visual Studio file menu. The menu entries titled Open under File menu and Project/Solution under Open are highlighted in red.":::

    1. From **bot-conversation-sso-quickstart** > **csharp_dotnetcore** folder, and select **BotConversationSsoQuickstart.sln** file.

        :::image type="content" source="~/assets/images/bots/filepath_1.png" alt-text="Screenshot of Project file with the file path and BotSSOCSharp.csproj file highlighted in red.":::

    1. Select **F5**  to run the project.

    1. If a **Security Warning** dialog appears, select **Yes**.

        :::image type="content" source="~/assets/images/bots/certificate.png" alt-text="Screenshot of Security Warning with the Yes option highlighted in red.":::

       A webpage opens with a message **Your bot is ready!**.

        :::image type="content" source="~/assets/images/bots/yourbot.png" alt-text="Screenshot of the webpage that displays Your bot is ready.":::
        
        <br>

        <details>

        <summary><b>Troubleshooting</b></summary>

        If you get the **Unable to find package** error, follow these steps:

        1.  Go to **Tools** > **NuGet Package Manager** > **Package Manager Settings**.
        1.	In the **Options** window that appears, select **NuGet Package Manager** > **Package Sources**.
        1.	Select **Add**.
        1.	In **Name**, enter `nuget.org` and in **Source**, enter `https://api.nuget.org/v3/index.json`.
        1.	Select **Update** and **OK**.
        1.	Rebuild your project.
        <br>

        </details>

- title: Upload the bot in Teams
  durationInMinutes: 2
  content: |
     1. In your cloned repository, go to **Microsoft-Teams-Samples** > **samples** > **bot-conversation-sso-quickstart** > **csharp_dotnetcore** > **BotConversationSsoQuickstart**. 
     1. Create a .zip file with the following files that are present in the **appPackage** folder: 

        * manifest.json
        * outline.png
        * color.png

        :::image type="content" source="~/assets/images/bots/manifest_1.png" alt-text="Screenshot of Manifest folder with the Teams Bot zip folder highlighted in red.":::

     1. Go to **Microsoft Teams**.
    
        1. In the Teams client, select **Apps**.
        1. Select **Manage your apps**.
        1. Select **Upload an app**.
        1. Look for the option to **Upload a custom app**.

            :::image type="content" source="~/assets/images/bots/custom-app-upload.png" alt-text="Screenshot of Teams app with the Apps icon, Manage your apps, and showing the selection of Upload a custom app option highlighted in red.":::

      1. Select **Open** to upload the .zip file that you've created in the **Manifest** folder.

         :::image type="content" source="~/assets/images/bots/app-open.png" alt-text="Screenshot of Manifest folder with Open option to upload the Teams Bot zip file highlighted in red.":::

      1. Select **Add** to add the bot to your chat.

         :::image type="content" source="~/assets/images/bots/conversation-bot-add.png" alt-text="Screenshot of Conversation Bot with Add option highlighted in red.":::

        You can interact with the bot by sending it a message. The bot exchanges an SSO token and calls the Graph API on your behalf. It keeps you signed in unless you send a message to sign out.

      1. Send a message to the bot. The conversation bot asks for consent for the first time.

         1. For desktop: Select **Continue** to give permissions to Teams client for accessing the bot.

            :::image type="content" source="~/assets/images/bots/sbsdesktop-mobile-consent-request1.png" alt-text="Screenshot of additional permissions with Continue option highlighted in red.":::
        
            > [!NOTE]
            > Now you’ve configured SSO with your bot app and it's the only time you'll have to give consent.

         1. For mobile: Select **Accept**.

            > [!NOTE]
            > Now you’ve configured SSO with your bot app in mobile, and it's the only time you'll have to give consent.

            :::image type="content" source="~/assets/images/bots/sbsdesktop-mobile-consent-request.png" alt-text="Screenshot of bot SSO output after you’ve successfully completed the step-by-step guide.":::




- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

     :::image type="content" source="~/assets/images/bots/sbs-desktop-mobile.png" alt-text="Screenshot of the output after you’ve successfully completed the step-by-step guide.":::
    
- content: |
    You've completed the tutorial to get started with build a bot with SSO authentication.
