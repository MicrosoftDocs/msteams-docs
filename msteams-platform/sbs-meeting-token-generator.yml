### YamlMime:Tutorial
title: Generate meeting token
metadata:
  title: Generate meeting token
  description: With this learning module, learn how to generate a meeting token for all the participants to interact in the meeting for Teams.
  audience: Developer
  level: Beginner
  ms.date: 11/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: apps-in-teams-meetings/build-tabs-for-meeting.md
  nextTutorialTitle: Read more to enable and configure apps for meetings
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    The Meeting token app helps to enhance your meeting experience in Teams by allowing meeting participants to request for token and generate tokens. The app generates tokens sequentially so that each participant has an equal opportunity to interact in the meeting. For example, the app is useful in Q&A sessions and in meetings, such as scrum meetings.

    > [!NOTE]
    > The In-meeting tabs for Meeting token generator app are available only for Teams desktop client.

    **Key features of Meeting token generator**

    * Displays the current token used in the meeting.
    * Displays the user list sorted based on the token number.
    * Generates a token for the user upon request.
    * Displays current user's token number.
    * Allows the organizer to skip the current meeting token.

    **Different ways of user interactions**

    * Token: Requests token for the user.
    * Done: Confirms token generation for the user.
    * Skip: Skips the current user and moves to the next person in line for a token.

      > [!NOTE]
      > Skip is available only to the meeting organizers.
    
    This step-by-step guide helps you to generate meeting token for all the participants to interact in the meeting. You see the following output:

       :::image type="content" source="~/assets/images/meeting-token-generator/sbs-final-output.png" alt-text="Screenshot shows the final output screen.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
   You install the following tools and set up your development environment: 

     | &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     | &nbsp; | [.NET Core SDK version 3.1](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. If you haven't installed the .NET 3.1 (or later) SDK globally, the portable version can be installed. |
     | &nbsp; | [Node.js and NPM](https://nodejs.org/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
     | &nbsp; | Dev tunnel | Teams app features (conversational bots, message extensions, and incoming webhooks) need inbound connections. A tunnel connects your development system to Teams. Dev tunnel is a powerful tool to securely open your localhost to the internet and control who has access. Dev tunnel is available in Visual Studio 2022 version 17.7.0 or later. <br> or </br> You can also use [ngrok](https://ngrok.com/download) as a tunnel to connect your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
           
      > [!NOTE]
      > After downloading ngrok, sign up and install [authtoken](https://ngrok.com/download).
    
    You must have working knowledge of the following technologies:

- title: Set up local environment
  durationInMinutes: 1
  content: |

   [!INCLUDE [Set up local environment](includes/get-started/clone-repository.md)]

- title: Register Microsoft Entra app 
  durationInMinutes: 5
  content: |
    The following steps help you to create and register your bot in Azure portal:
    
    * Create and register your Azure app. 
    * Create client secret to enable SSO authentication of the bot.
    * Add Teams channel to deploy the bot.
    * Create a tunnel to your web server's endpoints using dev tunnel (recommended) or ngrok.
    * Add messaging endpoint to the dev tunnel that you created.

    [!INCLUDE [Azure app registration](includes/get-started/azure-app-registration.md)]

    **Create a tunnel**

      # [dev tunnel](#tab/dev)

      [!INCLUDE [Tunnel](includes/get-started/dev-tunnel.md)]

      # [ngrok](#tab/ngrok)
      
      [!INCLUDE [Tunnel](includes/get-started/ngrok-tunnel.md)]

      ---     

    [!INCLUDE [Azure web authentication](includes/get-started/azure-web-authentication.md)]
    
    [!INCLUDE [Client secret](includes/get-started/create-client-secret.md)]

    [!INCLUDE [API Permission](includes/get-started/azure-api-permissions.md)]

    [!INCLUDE [Application ID URI](includes/get-started/application-id-uri.md)]

    [!INCLUDE [Azure add scope](includes/get-started/azure-add-scope.md)]

    [!INCLUDE [Azure client application](includes/get-started/azure-client-application.md)]

    [!INCLUDE [Manifest](includes/get-started/azure-manifest.md)]

- title: Create your bot 
  durationInMinutes: 5
  content: |

    [!INCLUDE [Azure bot resource](includes/get-started/azure-bot-resource.md)]    

    [!INCLUDE [Teams channel](includes/get-started/add-teams-channel.md)]

    [!INCLUDE [Messaging endpoint](includes/get-started/messaging-endpoint.md)]

- title: Set up app settings
  durationInMinutes: 1
  content: |
    1. Go to the **appsettings.json** file in cloned repository.

        :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-appsettingslocation.png" alt-text="Screenshot of cloned repository with the file path and appsettings JSON file highlighted in red.":::

    1. Open the **appsettings.json** file in **Visual Studio Code** and update the following information:  

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret **Value**.
         * Set `"AzureAd"."TenantId"` to the tenant ID of the tenant where the app is used.

        > [!NOTE]
        > The sample works only in the current tenant.

         * Set `"AzureAd"."ApplicationId"` to your bot's **Microsoft App ID**.
         * Set `"ContentBubbleUrl"` to the content bubble iframe url `(https://[WebAppDomain]/contentBubble.html)`.

        > [!NOTE]
        > `WebAppDomain` is your ngrok domain, so the content bubble URL is similar to `https://ae57****.ngrok.io/contentBubble.html`.

        :::image type="content" source="~/assets/images/meeting-token-generator/sbs-app-setting-latest.png" alt-text="Screenshot shows the updated information of appsettings.":::

- title: Set up manifest file
  durationInMinutes: 1
  content: |
    1. Go to `manifest.json` file in cloned repository.

        :::image type="content" source="~/assets/images/meeting-token-generator/sbs-manifest.png" alt-text="Screenshot of Teams App Manifest folder with the file path and manifest file highlighted in red.":::
    
    1. Open `manifest.json` file in **Visual Studio Code** and make the following changes:

         * Set `manifestVersion` to the latest version.
         * Set `$schema` to `https://developer.microsoft.com/json-schemas/teams/v1.11/MicrosoftTeams.schema.json`.
         * Set `resource` to `api://[WebAppDomainName]/[MicrosoftAppId]`.
         * Replace `[companyName]` to `Contoso`.
         * Replace the following sections to your fully qualified domain name:
           * `websiteUrl`
           * `privacyUrl`
           * `termsOfUseUrl` 
         * Replace all occurrences of `WebAppDomainName` with your ngrok domain name.
         * Replace all occurrences of `MicrosoftAppId` with your bot's **Microsoft App ID**.

          :::image type="content" source="~/assets/images/meeting-token-generator/sbs-app-manifest.png" alt-text="Screenshot shows the update of Schema, ID, Resource, Company name, website Url, privacy Url, and termsofUseUrl.":::

- title: Build client app using npm install
  durationInMinutes: 1
  content: |
    1. Go to the **ClientApp** folder in cloned repository.
    1. Copy the **ClientApp** folder path.
    1. Open a new **Command Prompt** window, change the current directory to the copied **ClientApp** path.

       :::image type="content" source="~/assets/images/meeting-token-generator/command-prompt.png" alt-text="Screenshot shows the location of client app in csharp folder.":::

    1. Run the following command in the **Command Prompt** to download packages and dependencies.
    
       ```Command Prompt
       npm install
       ```
    1. Run the following command in the **Command Prompt** to start the app.

       ```Command Prompt
       npm start
       ```
       :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-buildapp.png" alt-text="Screenshot of Command Prompt displaying the commands.":::

- title: Build and run the service
  durationInMinutes: 1
  content: |
   To build and run the service, use Visual Studio or Command line.

   # [Visual Studio](#tab/vs)

      1. Open Visual Studio.
      1. Go to **File** > **Open** > **Project/Solution...**.
          
         :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-VSopenfile.png" alt-text="Screenshot of Visual Studio with the File, Open, and Project/Solution options highlighted in red.":::

      1. Select **TokenApp.csproj** file from **csharp** folder.

         :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-Tokenfileready.png" alt-text="Screenshot of cloned repository with the TokenApp.csproj file highlighted in red.":::

      1. Press **F5** to run the project.
    
      1. Select **Yes** if the following dialog appears:

         :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-certificate.png" alt-text="Screenshot of Security Warning with the Yes option highlighted in red.":::

         A webpage opens with a message **App is ready!**.

         :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-appisready.png" alt-text="Screenshot shows the webpage that displays Your bot is ready.":::

   # [Command line](#tab/cli)

   Go to the **csharp** folder in a Command Prompt window and enter the following command:

   ```bash
    dotnet run
   ```
   :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-dotnetruncmd.png" alt-text="Screenshot displaying the Command Prompt - dotnet run.":::

- title: Enable developer preview
  durationInMinutes: 1
  content: |
    1. Enable uploading of apps in the admin console of your tenant.
       1. Sign in to [Microsoft 365 admin center](https://admin.microsoft.com/Adminportal/Home?source=applauncher#/homepage#/) with your admin credentials.
       1. In the left pane, select **Show All**.
       1. Select **Teams**.
 
          :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-admincenterimage.png" alt-text="Screenshot of Admin Centers with Teams option highlighted in red.":::

       1. In the left pane, select **Teams apps**.
       
       1. Select **Setup Policies**.

          :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-setup-policies.png" alt-text="Screenshot of Microsoft Teams admin center with Teams apps and Setup policies highlighted in red."::: 

       1. Select **Global**.

          :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-turnonsideload.png" alt-text="Screenshot of Microsoft Teams admin center that shows the Global settings option highlighted in red.":::

       1. Enable **On** position in **Upload custom apps**.

          :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-toggleOn.png" alt-text="Screenshot of the Upload custom apps toggle turned on is highlighted in red.":::

       1. Select **Save**. 
       
          Your test tenant can permit custom app upload.

          > [!NOTE]
          > Custom app upload takes some time to become active.

    1. Go to **Microsoft Teams**.
    
    1. From the upper right corner of your Teams interface, select **Settings and more(...)**.
    
    1. Select **About** > **Developer preview**.

          :::image type="content" source="~/assets/images/meeting-token-generator/sbs-dev-preview.png" alt-text="Screenshot of compose message section that shows the More option, the About option, and Developer preview under the About option being highlighted in red.":::
   
    1. Select **Switch to developer preview**.

         :::image type="content" source="~/assets/images/meeting-token-generator/sbs-developer-preview.png" alt-text="Screenshot of Developer preview with Switch to developer preview highlighted in red.":::

- title: Add meeting token to Teams
  durationInMinutes: 1
  content: |
    1. In your cloned repository, go to **csharp > AppManifest**.

    1. Create a .zip file with the following files that are present in the **AppManifest** folder: 
       * manifest.json
       * outline.png
       * color.png

       :::image type="content" source="~/assets/images/meeting-token-generator/sbs-cshrap-manifest.png" alt-text="Screenshot of cloned repository with path and Meeting token generator zip file highlighted in red."::: 
    
    1. Create a meeting in Teams with a few presenters and attendees.

    1. Join the meeting.
   
    1. After the meeting has started, select **Apps**.
    
    1. In the pop-up window, select **Manage apps**.
   
       :::image type="content" source="~/assets/images/meeting-token-generator/add-app-teams.png" alt-text="Screenshot shows how to add an app in a meeting.":::
    
    1. Select **Upload an app**.

    1. Select the .zip file you've created in the **AppManifest** folder and select **Open**.

       :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-selectzip.png" alt-text="Screenshot of the cloned repository path and Meeting token generator .zip file highlighted in red. ":::

    1. Select **Add**.

       :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-addtheapp.png" alt-text="Screenshot of Meeting Token App with Add option highlighted in red.":::

       The **Manage apps** section displays the list of applications.

       :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-manageappsection.png" alt-text="Screenshot of Manage apps displaying the list of applications.":::
   
    1. Go to Teams meeting.
    
    1. Select **App** icon. In the app selection page, the app displays as **Meeting Token App**.
  
       :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-appicon.png" alt-text="Screenshot of Find an app with Meeting Token App highlighted in red. ":::

    1. Select **Meeting Token App**.
    
    1. Select **Save**.

       :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-welcomeapp.png" alt-text="Screenshot of Meeting Token App with Save option highlighted in red.":::
   
       The app is visible in the meeting chat. 

    1. Start the meeting. 
    
       The icon is visible in the meeting control bar.

        :::image type="content" source="~/assets/images/meeting-token-generator/meeting-token-generator-tokeninmeet.png" alt-text="Screenshot of Teams meeting displaying the Current Token.":::

        > [!NOTE] 
        > When you work on your own project, ensure to use a durable storage mechanism to store the token information and service URL for the tenant.

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    :::image type="content" source="~/assets/images/meeting-token-generator/sbs-final-output.png" alt-text="Screenshot shows the final output screen.":::

- content: |
    You've completed the tutorial to get started with a Meeting Token Generator app.
