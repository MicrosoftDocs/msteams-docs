### YamlMime:Tutorial
title: Build notification bot with JavaScript
metadata:
  title: Build notification bot with JavaScript
  description: In this tutorial, you can learn to send notification by creating a new notification bot with Teams Toolkit.
  audience: Developer
  level: Beginner
  ms.date: 01/07/2024
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Back to Get started overview
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    The notification bot proactively sends messages in Teams channel or group chat or personal chat. You can trigger the notification bot with an HTTP request, such as cards or texts.
    
    In this tutorial, you learn:

    - How to create a new notification bot with Teams Toolkit.
    - About the directory structure of your app.
    - How to send multiple notifications.

    This step-by-step guide helps you to build notification bot with Teams Toolkit. You can see the following output:

      :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Trigger Output"border="true":::

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Here's a list of tools you need for building and deploying your apps.

   | &nbsp; | Install | For using |
   | --- | --- | --- |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, or TypeScript, build environments. Use the latest version. |
   | &nbsp; | [Teams Toolkit](#install-teams-toolkit) | Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version. |
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call all in one place.|
   | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   | &nbsp; | [Microsoft 365](https://developer.microsoft.com/en-us/microsoft-365/dev-program) | Access to Teams account with the appropriate permissions to install an app. |
   
   > [!NOTE]
   > The guide is tested on Teams Toolkit latest version and Nodejs version 14 and 16. The steps in this guide may work with other versions, but that hasn't been tested.
   
   [!INCLUDE [Set up prerequisites](includes/get-started/prepare-teams-toolkit.md)]

- title: Build notification bot 
  durationInMinutes: 1
  content: |
   **To build notification bot using Visual Studio Code**

    1. Open Visual Studio Code.
    
    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code **Activity Bar**.

    1. Select **Create a New App**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/create-new-teams-app.png" alt-text="Location of the Create New Project link in the Teams Toolkit sidebar.":::

    1. Select **Bot** to create a new bot project.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/create-new-app.png" alt-text="Wizard starts for creating a new project":::

    1. Ensure that **Chat Notification Message** is selected as the App feature that you want to build in your app. 

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-notification-bot.png" alt-text="Select App Capability":::

    1. Select **HTTP Trigger Restify Server** as the trigger. 

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-trigger.png" alt-text="Screenshot showing how to select the programming language.":::  

    1. Select **JavaScript** as the programming language.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-script.png" alt-text="Screenshot showing how to select the programming language.":::    

    1. Select **Default folder** to store your project root folder in default location.

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-default-location.png" alt-text="Select default location":::
    
       You can also change the default location by the following steps:

        1. Select **Browse**.

            :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-browse.png" alt-text="Select browse location":::
            
        1. Select the location for project workspace.

        1. Select the **Select Folder**.

           :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/select-folder.png" alt-text="Select Folder":::
    
    1. Enter a suitable name for your app. 
    1. Select **Enter**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/type-notfication-name.png" alt-text="Screenshot showing where to enter the app name.":::

    1. After your app is created, the Teams Toolkit displays the following message:

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/new-window-notification.png" alt-text="New window notification":::

        The notification bot app is created in a few seconds.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/my-notification-bot.png" alt-text="Screenshot showing the app created.":::
  
    1. Select **Run and Debug** :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png"::: icon from the Visual Studio Code **Activity Bar**.

    1. Select **Debug in Teams (Edge)** or **Debug in Teams (Chrome)** from the dropdown list.

    1. Select **Start Debugging** button.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/debug-app.png" alt-text="The screenshot shows how to debug your app in Teams Toolkit." border="true":::

    1. Select **Add**.
    
        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/my-notification-output.png" alt-text="My Notification Output1"border="true":::

       Your notification bot app is uploaded into Teams client.

       In real time, events are triggered by an external source, such as a third party API that cause the notification bot to send the user a notification. To emulate an event trigger, you can send an event manually using powershell or terminal.

    1. To invoke an event to trigger a notification, use one of the following ways:
    
        * If you use Windows, follow the steps:
          1. Open **Windows PowerShell**.
          1. Run the `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` command.

             :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png" alt-text="Powershell Trigger"border="true" lightbox="../msteams-platform/assets/images/sbs-notification-bot/windows-powershell-1.png":::

        * If you don't use Windows, follow the steps:
          1. In Visual Studio Code, go to **Terminal** > **New Terminal** to open another terminal.
          1. Run the `curl -X POST http://localhost:3978/api/notification` command.

        You'll get the following output in Teams:

          :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Trigger Output"border="true" lightbox="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png":::

    
    > [!NOTE]
    > If you want to extend your app to Outlook and Microsoft 365, you can choose to debug your app with Outlook and Microsoft 365 from **RUN AND DEBUG** dropdown in Visual Studio Code.

    ## Take tour of source code

    Teams Toolkit provides components for building an app. After creating the project, you can view the project folders and files in the **Explorer** area of Visual Studio Code.

    :::image type="content" source="~/assets/images/sbs-notification-bot/folder-structure1.png" alt-text="structure tab":::

    The new project folder contains following content:

    | Folder/file name | Contents |
    | --- | --- |
    | `.vscode` | VSCode files for debugging. |
    | `appPackage` | Templates for the app manifest (previously called Teams app manifest). |
    | `env` | Name / value pairs are stored in environment files and used by teamsapp.yml to customize the provisioning and deployment rules. |
    | `infra` | Templates for provisioning Azure resources. |
    | `src\`| The source code for the notification Teams application. |
    | `src\index.js`| Application entry point and `restify` handlers for notifications. |
    | `src\teamsbot.js` | An empty teams activity handler for bot customization. |
    | `src\adaptiveCards\notification-default.json` | A generated Adaptive Card that is sent to Teams. |
    | `teamsapp.yml` | Main project file describes your application configuration and defines the set of actions to run in each lifecycle stages. |
    | `teamsapp.local.yml` | This overrides `teamsapp.yml` with actions that enable local execution and debugging. |

- title: Send notification to Teams channel
  durationInMinutes: 1
  content: |
    **To send notification to Teams channel**
    
    1. In Visual Studio Code, under **EXPLORER**, select **MYNOTIFICATIONBOT> src> index.js**.

        :::image type="content" source="~/assets/images/sbs-notification-bot/file-path.png" alt-text="File path":::

       You can see the following page:

         :::image type="content" source="~/assets/images/sbs-notification-bot/default-program.png" alt-text="Default Program" lightbox="~/assets/images/sbs-notification-bot/default-program-1.png":::

    1. Use the following code after `for (const target of await bot.notification.installations()) { ` in Visual Studio Code.

         ```bash
         if (target.type === "Channel") {
           const members = await target.members();
           await target.sendMessage("This is a message to channel: " + members.length + " members.");
           for (const member of members) {
             await member.sendMessage("This is a message to Member: " + member.account.email);
           }
         }
         /* 
         ```  

          :::image type="content" source="~/assets/images/sbs-notification-bot/code-add.png" alt-text="Code Add" lightbox="~/assets/images/sbs-notification-bot/code-add-1.png":::

        **To customize storage (Optional):**

        1. In Visual Studio Code, under **EXPLORER**, select **MYNOTIFICATIONBOT> src> internal> initialize.js**.

            :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/initialize-storage.png" alt-text="Storage Initialize":::
        
           You can see the following page:

            :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/storage-code.png" alt-text="Storage Code" lightbox="../msteams-platform/assets/images/sbs-notification-bot/storage-code-1.png":::

        1. Update the following code in **initialize.js** file to customize the storage.

             ```bash
             const myStorage = new MyStorage(...);

             // initialize ConversationBot with notification enabled and customized storage
             const bot = new ConversationBot({
                 // The bot id and password to create BotFrameworkAdapter.
                 // See https://aka.ms/about-bot-adapter to learn more about adapters.
                 adapterConfig: {
                     appId: process.env.BOT_ID,
                     appPassword: process.env.BOT_PASSWORD,
                 },
                 // Enable notification
                 notification: {
                     enabled: true,
                     storage: myStorage,
                 },
              });
             ```  
        1. Use your own storage location instead of **MyStorage**.

            > [!NOTE]
            > It's required to use your own storage for production environment. If storage isn't provided, default local file storage is considered.

    1. Select **Run and Debug** :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png"::: icon from the Visual Studio Code sidebar.

    1. Select **Debug in Teams (Edge)** or **Debug in Teams (Chrome)** from the dropdown list.

    1. Select **Start Debugging** button.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/debug-app.png" alt-text="The screenshot shows how to debug your app in Teams Toolkit.":::

        You get the following output in Teams.

          :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/app-installation.png" alt-text="App Installation":::

    1. Select **Add to a team** in the dropdown list.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/app-installation-add.png" alt-text="Screenshot shows the option to add the custom app in Teams.":::

    1. In **Search box**, add any **channel**.
    1. Select **Set up a bot**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/setup-bot.png" alt-text="Setup Bot":::

       The following screen appears:

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/channel-notification.png" alt-text="Channe1 Notification":::

    1. Open **Windows PowerShell**.

    1. Run the `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` command.

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png" alt-text="Powershell Trigger"border="true" lightbox="../msteams-platform/assets/images/sbs-notification-bot/windows-powershell-1.png":::   

       You get the notification in the Teams channel:

         :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/channel-output.png" alt-text="Channel Output" lightbox="../msteams-platform/assets/images/sbs-notification-bot/channel-output.png":::

       You get the notification in the personal chat:         

        :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/member-output.png" alt-text="member-output":::
    
- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learned to build and run Teams app with notification bot capability. The final step is to deploy your app to Azure.

    Let's deploy the first app with notification bot capability on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use your account to access the Microsoft Azure portal and to provide provision new cloud resources to support your app.

    1. Open Visual Studio Code.
    1. Open the project folder where you created the notification bot app.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign in to Azure** using your credentials.

        > [!TIP]
        > If you have the AZURE ACCOUNT extension installed and are using the same account, you can skip this step.

        Your default web browser opens to let you sign in to the account.
    1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Congratulations, you have created a Teams app! Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    ## Deploy your app to Azure

      Under **DEPLOYMENT**, you can provision for necessary cloud resources and your app's code is copied into the created cloud resources.

    # [Visual Studio Code](#tab/vscode)

    1. Select the Teams Toolkit :::image type="icon" source="~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code sidebar.

    1. Select **Provision** under **LIFECYCLE**.

        :::image type="content" source="~/assets/images/sbs-notification-bot/provision-cloud.png" alt-text="Screenshot showing the provisioning commands":::

    1. Select an existing resource group or create new resource group. For more information, see [Create resource group](/azure/azure-resource-manager/management/manage-resource-groups-portal#create-resource-groups).

    1. Select anyone of the existing subscription.

        :::image type="content" source="~/assets/images/sbs-notification-bot/select-subscription.png" alt-text="Screenshot showing the selection of existing subscription.":::

    1. Select an existing or create new resource group.
    
        :::image type="content" source="~/assets/images/sbs-notification-bot/subscription-cloud.png" alt-text="Screenshot showing resources for provisioning.":::

       > [!NOTE]
       > A dialog appears mentioning that costs may be incurred when running resources in Azure.

    1. Select **Provision**.

        :::image type="content" source="~/assets/images/sbs-notification-bot/provision-confirm1.png" alt-text="Screenshot of the provisioning dialog.":::

       The provisioning process creates resources in Azure cloud. You can monitor the progress by observing the dialogs in the lower-right corner.

        :::image type="content" source="~/assets/images/sbs-notification-bot/deploy-provision-success.png" alt-text="Screenshot showing the provisioning complete dialog.":::

         You see the option to view the provisioned resources. For this tutorial, you don't need to view resources.

    1. Select **Deploy** under **LIFECYCLE** after provisioning is complete.

        :::image type="content" source="~/assets/images/sbs-notification-bot/deploy-cloud.png" alt-text="Screenshot showing where to select to deploy to cloud.":::

    1. Select **Deploy**.

        :::image type="content" source="~/assets/images/sbs-notification-bot/Deploy-confirm.png" alt-text="Deploy to confirm.":::

       Deployment takes some time. You can monitor the progress in the dialogs in lower-right corner.
        
        :::image type="content" source="~/assets/images/sbs-notification-bot/deploy-confirmation-cloud.png" alt-text="Deploy confirmation.":::

    # [Command Line](#tab/cli)

    In your terminal window:

    1. Run `teamsfx new` to create new project.

       ``` bash
       teamsfx new
       ```

    1. Run `teamsfx provision` to create azure resource.

       ``` bash
       teamsfx provision
       ```

    1. Run `teamsfx deploy` to deploy the app.

       ``` bash
       teamsfx deploy
       ```

    1. Run `teamsfx preview` to run the app.

       ``` bash
       teamsfx preview
       ```

    ---
    
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

     :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Trigger Output"border="true":::

- content: |
   You've completed the tutorial to build a notification bot. You can extend your notification bot to add the command response and workflow features.
   