### YamlMime:Tutorial
title: Build command bot with JavaScript
metadata:
  title: Build command bot with JavaScript
  description: In this tutorial, you learn to create command bot with JavaScript by building command bot with Teams Toolkit.
  audience: Developer
  level: Beginner
  ms.date: 05/05/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/teams-toolkit-tutorial.md
  nextTutorialTitle: Teams app tutorials
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Microsoft Teams allows you to automate repetitive tasks using a command bot. It responds to simple commands sent in chats with Adaptive Cards. 

    In this tutorial, you learn:

    - How to build command bot with Teams Toolkit.
    - About the directory structure of your app.
    
    This step-by-step guide helps you to build command bot with Teams Toolkit. You can see the following output:

      :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="Screenshot shows the final output." lightbox="~/assets/images/sbs-command-bot/final-output.png":::

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Here's a list of tools you need for building and deploying your apps.

   | &nbsp; | Install | For using |
   | --- | --- | --- |
   | **Required** | &nbsp; | &nbsp; |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript or TypeScript, build environments. Use the latest version. |
   | &nbsp; | [Teams Toolkit](#install-teams-toolkit) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use the latest version.|
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call all in one place.|
   | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
   
   > [!NOTE]
   > The guide is tested on Teams Toolkit latest version and Nodejs version 14 and 16. The steps in this guide may work with other versions, but that hasn't been tested.

   [!INCLUDE [Set up prerequisites](includes/get-started/prepare-teams-toolkit.md)]

- title: Build command bot
  durationInMinutes: 1
  content: |
   **To build command bot using Visual Studio Code**

    1. Open Visual Studio Code.

    1. Select the Teams Toolkit :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code **Activity Bar**.

    1. Select **Create a New App**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/create-new-teams-app.png" alt-text="Location of the Create New Project link in the Teams Toolkit sidebar.":::

    1. Select **Bot** to create a new bot project.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/create-new-app.png" alt-text="Screenshot shows the wizard to Create New Project.":::

    1. Ensure that **Chat Command** is selected as the app feature that you want to build in your app.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-command-bot.png" alt-text="Screenshot shows the app feature to add to your new app.":::

    1. Select **JavaScript** as the programming language.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-script.png" alt-text="Screenshot showing how to select the programming language.":::
    
    1. Select **Default folder** to store your project root folder in default location.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-default-location.png" alt-text="Screenshot shows the selection of default location for storage.":::

       You can also change the default location by the following steps:

          1. Select **Browse**.

             :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-browse.png" alt-text="Screenshot shows the selection of browse location for storage.":::

          1. Select the location for project workspace.
          1. Select **Select Folder**.

              :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/select-folder.png" alt-text="Screenshot shows the selection of folder.":::
    
    1. Enter a suitable name for your app. 
    1. Select **Enter**.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/app-name.png" alt-text="Screenshot shows to enter the application name.":::

    1. After your app is created, the Teams Toolkit displays the following message:

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/new-window-notification.png" alt-text="Screenshot shows the new window Notification for scaffolding.":::

        The command bot app is created in a few seconds.

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/command-bot.png" alt-text="Screenshot shows the app created.":::

    1. Select **Run and Debug** :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png"::: icon from the Visual Studio Code **Activity Bar**.

    1. Select **Debug in Teams (Edge)** or **Debug in Teams (Chrome)** from the dropdown list.

    1. Select **Start Debugging** button. You'll be prompted to upload the command bot app onto Teams on your local machine. 

        :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/debug-app.png" alt-text="Screenshot shows the debugging application.":::

    1. Select **Add** or use the dropdown menu to add your command bot app to a team, chat, or meeting.
    
        :::image type="content" source="~/assets/images/sbs-command-bot/app-cloud-output.png" alt-text="Screenshot shows the app cloud output.":::    

    1. Select the **command bot**.
    
    1. Select **Enter**.

         :::image type="content" source="../msteams-platform/assets/images/sbs-command-bot/hello-world-command.png" alt-text="Screenshot shows to add an App dropdown":::  

       You receive the following command response in adaptive card:

        :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="Screenshot shows the final output." lightbox="~/assets/images/sbs-command-bot/final-output.png":::      

    ## Take tour of source code

    Teams Toolkit provides components for building an app. After creating the project, you can view the project folders and files in the **Explorer** area of Visual Studio Code.

      :::image type="content" source="~/assets/images/sbs-command-bot/folder-structure-command-bot.png" alt-text="Screenshot shows the structure tab":::

    If you choose to use UI framework, following sample template code provides a scaffolding with React components. It contains following content:

    | Folder / File | Contents |
    | - | - |
    | `teamsapp.yml` | Main project file describes your application configuration and defines the set of actions to run in each lifecycle stages. |
    | `teamsapp.local.yml`| This overrides `teamsapp.yml` with actions that enable local execution and debugging. |
    | `env/`| Name / value pairs are stored in environment files and used by `teamsapp.yml` to customize the provisioning and deployment rules. |
    | `.vscode/` | VSCode files for debugging. |
    | `appPackage/` | Templates for the Teams application manifest. |
    | `infra/` | Templates for provisioning Azure resources. |
    | `src/` | The source code for the application. |
    | `src/index.js` | Application entry point and `restify` handlers for command and response. |
    | `src/teamsBot.js` | An empty teams activity handler for bot customization. |
    | `src/adaptiveCards/helloworldCommand.json` | A generated Adaptive Card that is sent to Teams. |
    | `src/helloworldCommandHandler.js` | The business logic to handle a command. |

- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learnt to build, and run Teams app with command bot capability. The final step is to deploy your app on Azure.

    Let's deploy the first app with command bot capability on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use your account to access the Microsoft Azure portal and to provide provision new cloud resources to support your app.

    1. Open Visual Studio Code.
    1. Open the project folder that you created the command bot app.
    1. Select the Teams Toolkit  :::image type="icon" source="../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the sidebar.
    1. Select **Sign in to Azure** using your credentials.

        > [!TIP]
        > If you have the AZURE ACCOUNT extension installed and are using the same account, you can skip this step.

        Your default web browser opens to let you sign-in to the account.
        1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Congratulations, you have created a Teams app! Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    ## Deploy your app to Azure

     Under **DEPLOYMENT** you can provision for necessary cloud resources and your app's code is copied into the created cloud resources.

    # [Visual Studio Code](#tab/vscode)

    1. Select the Teams Toolkit :::image type="icon" source="~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png"::: icon in the Visual Studio Code sidebar.

    1. Select **Provision** under **LIFECYCLE**.

        :::image type="content" source="~/assets/images/sbs-command-bot/provision-cloud.png" alt-text="Screenshot shows the provisioning commands.":::

    1. Select an existing resource group or create new resource group. For more information, see [Create resource group](/azure/azure-resource-manager/management/manage-resource-groups-portal#create-resource-groups).
    
        :::image type="content" source="~/assets/images/sbs-command-bot/subscription-cloud.png" alt-text="Screenshot show resources for provisioning.":::

        > [!NOTE]
        > A dialog appears mentioning that costs may be incurred when running resources in Azure.

    1. Select **Provision**.

        :::image type="content" source="~/assets/images/sbs-command-bot/provision-confirm1.png" alt-text="Screenshot of the provisioning dialog.":::

       The provisioning process creates resources in the Azure cloud. You can monitor the progress by observing the dialogs in the lower-right corner. After few minutes, you see the following notice:

        :::image type="content" source="~/assets/images/sbs-command-bot/deploy-provision-success1.png" alt-text="Screenshot shows the provisioning complete dialog.":::

         You have the option to view the provisioned resources. For this tutorial, you don't need to view resources.

    1. Select **Deploy** under **LIFECYCLE** after provisioning is complete.

        :::image type="content" source="~/assets/images/sbs-command-bot/deploy-cloud.png" alt-text="Screenshot showing the where to click to deploy to cloud.":::

    1. Select **Deploy**.

        :::image type="content" source="~/assets/images/sbs-command-bot/Deploy-confirm.png" alt-text="Screenshot shows the confirmation to deploy.":::

       Deployment takes some time. You can monitor the progress in the dialog in lower-right corner. After a few minutes, you see the following notice.

        :::image type="content" source="~/assets/images/sbs-command-bot/command-deploy-confirm.png" alt-text="Screenshots shows the deploy confirm.":::
    
    
    1. Open the debug panel (**Ctrl+Shift+D** / **⌘⇧-D** or **View > Run**) from Visual Studio Code.
    1. Select **Launch Remote in Teams (Edge)** from the launch configuration dropdown.
    1. Select **Start Debugging** button. You'll be prompted to upload the command bot app onto Teams.

         :::image type="content" source="~/assets/images/sbs-command-bot/remote-debug.png" alt-text="Screenshot shows the remote debug.":::

    1. Select **Add** or use the dropdown menu to add your command bot app to a team, chat, or meeting.
    
        :::image type="content" source="~/assets/images/sbs-command-bot/app-cloud-output.png" alt-text="Screenshot shows the app cloud output.":::

    1. Select the **command bot**.
    1. Select **Enter**.  

        :::image type="content" source="~/assets/images/sbs-command-bot/hello-world-cloud.png" alt-text="Screenshot shows the Hello World Command to enter.":::

        You receive the following command response in adaptive card:

         :::image type="content" source="~/assets/images/sbs-command-bot/cloud-final-output.png" alt-text="Screenshot shows the cloud final output.":::

    # [Command Line](#tab/cli)

    In your terminal window:

    1. Run `teamsfx new` to create new project.

       ``` bash
       teamsfx new
       ```

    1. Run `teamsfx provision` to create azure resource.

       ``` bash
       teamsfx provision
       ```

    1. Run `teamsfx deploy` to deploy the app.

       ``` bash
       teamsfx deploy
       ```

    1. Run `teamsfx preview` to run the app.

       ``` bash
       teamsfx preview
       ```

    ---

- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    :::image type="content" source="~/assets/images/sbs-command-bot/final-output.png" alt-text="Screenshot shows the cloud final output.":::
  
- content: |
    You've completed the tutorial to build command response app.   
